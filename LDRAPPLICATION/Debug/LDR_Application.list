
LDR_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e0  0800a5e0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e8  0800a5e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a5f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000ac4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b40  20000b40  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000192d6  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e06  00000000  00000000  000393c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001450  00000000  00000000  0003d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fac  00000000  00000000  0003e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025aa5  00000000  00000000  0003f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c991  00000000  00000000  00065071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da6eb  00000000  00000000  00081a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005aa0  00000000  00000000  0015c0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00161b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a568 	.word	0x0800a568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800a568 	.word	0x0800a568

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fda0 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f8a2 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 fa1a 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058c:	f000 f95a 	bl	8000844 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000590:	f000 f986 	bl	80008a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000594:	f000 f9b4 	bl	8000900 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000598:	f009 f828 	bl	80095ec <MX_USB_HOST_Init>
  MX_ADC1_Init();
 800059c:	f000 f900 	bl	80007a0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f9e4 	bl	800096c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005a4:	f009 f848 	bl	8009638 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_ADC_Start(&hadc1);
 80005a8:	4841      	ldr	r0, [pc, #260]	; (80006b0 <main+0x134>)
 80005aa:	f000 fe65 	bl	8001278 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 80005ae:	2114      	movs	r1, #20
 80005b0:	483f      	ldr	r0, [pc, #252]	; (80006b0 <main+0x134>)
 80005b2:	f000 ff33 	bl	800141c <HAL_ADC_PollForConversion>
    lux = HAL_ADC_GetValue(&hadc1);
 80005b6:	483e      	ldr	r0, [pc, #248]	; (80006b0 <main+0x134>)
 80005b8:	f000 ffbb 	bl	8001532 <HAL_ADC_GetValue>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <main+0x138>)
 80005c2:	801a      	strh	r2, [r3, #0]
    sprintf(msg, "Light %hu \r\n", lux);
 80005c4:	4b3b      	ldr	r3, [pc, #236]	; (80006b4 <main+0x138>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	493b      	ldr	r1, [pc, #236]	; (80006b8 <main+0x13c>)
 80005cc:	483b      	ldr	r0, [pc, #236]	; (80006bc <main+0x140>)
 80005ce:	f009 fbd3 	bl	8009d78 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg ,strlen(msg), HAL_MAX_DELAY);
 80005d2:	483a      	ldr	r0, [pc, #232]	; (80006bc <main+0x140>)
 80005d4:	f7ff fdfc 	bl	80001d0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4936      	ldr	r1, [pc, #216]	; (80006bc <main+0x140>)
 80005e2:	4837      	ldr	r0, [pc, #220]	; (80006c0 <main+0x144>)
 80005e4:	f005 fa49 	bl	8005a7a <HAL_UART_Transmit>
    HAL_Delay(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f000 fddc 	bl	80011a8 <HAL_Delay>

    if(lux<20)
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <main+0x138>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2b13      	cmp	r3, #19
 80005f6:	d82d      	bhi.n	8000654 <main+0xd8>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	4831      	ldr	r0, [pc, #196]	; (80006c4 <main+0x148>)
 8000600:	f001 fc70 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fdcf 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	482c      	ldr	r0, [pc, #176]	; (80006c4 <main+0x148>)
 8000612:	f001 fc67 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 fdc6 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000622:	4828      	ldr	r0, [pc, #160]	; (80006c4 <main+0x148>)
 8000624:	f001 fc5e 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 fdbd 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	4823      	ldr	r0, [pc, #140]	; (80006c4 <main+0x148>)
 8000636:	f001 fc55 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 fdb4 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4820      	ldr	r0, [pc, #128]	; (80006c8 <main+0x14c>)
 8000648:	f001 fc4c 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(200);
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f000 fdab 	bl	80011a8 <HAL_Delay>
 8000652:	e7a7      	b.n	80005a4 <main+0x28>
    }else
    {
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	481b      	ldr	r0, [pc, #108]	; (80006c8 <main+0x14c>)
 800065c:	f001 fc42 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(200);
 8000660:	20c8      	movs	r0, #200	; 0xc8
 8000662:	f000 fda1 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <main+0x148>)
 800066e:	f001 fc39 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f000 fd98 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0x148>)
 8000680:	f001 fc30 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	; 0x64
 8000686:	f000 fd8f 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <main+0x148>)
 8000692:	f001 fc27 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f000 fd86 	bl	80011a8 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0x148>)
 80006a4:	f001 fc1e 	bl	8001ee4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 80006a8:	2064      	movs	r0, #100	; 0x64
 80006aa:	f000 fd7d 	bl	80011a8 <HAL_Delay>
    MX_USB_HOST_Process();
 80006ae:	e779      	b.n	80005a4 <main+0x28>
 80006b0:	20000098 	.word	0x20000098
 80006b4:	2000021c 	.word	0x2000021c
 80006b8:	0800a580 	.word	0x0800a580
 80006bc:	20000220 	.word	0x20000220
 80006c0:	200001d4 	.word	0x200001d4
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40021000 	.word	0x40021000

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f009 fb6c 	bl	8009db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <SystemClock_Config+0xcc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd0>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fade 	bl	8004d14 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075e:	f000 fa41 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fd3f 	bl	8005204 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800078c:	f000 fa2a 	bl	8000be4 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_ADC1_Init+0x98>)
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <MX_ADC1_Init+0x9c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ADC1_Init+0x98>)
 80007ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_ADC1_Init+0x98>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_ADC1_Init+0xa0>)
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_ADC1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_ADC1_Init+0x98>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_ADC1_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_ADC1_Init+0x98>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_ADC1_Init+0x98>)
 8000802:	f000 fcf5 	bl	80011f0 <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800080c:	f000 f9ea 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000810:	230f      	movs	r3, #15
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000818:	2301      	movs	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_ADC1_Init+0x98>)
 8000822:	f000 fe93 	bl	800154c <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 f9da 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000098 	.word	0x20000098
 800083c:	40012000 	.word	0x40012000
 8000840:	0f000001 	.word	0x0f000001

08000844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f003 fc63 	bl	800414c <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 f9aa 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000e0 	.word	0x200000e0
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <MX_I2S3_Init+0x58>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008c8:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <MX_I2S3_Init+0x5c>)
 80008ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008e0:	f003 fd78 	bl	80043d4 <HAL_I2S_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ea:	f000 f97b 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000134 	.word	0x20000134
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	00017700 	.word	0x00017700

08000900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f004 ffb9 	bl	80058c8 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f942 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000017c 	.word	0x2000017c
 8000968:	40013000 	.word	0x40013000

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f005 f819 	bl	80059da <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f919 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001d4 	.word	0x200001d4
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	4b7c      	ldr	r3, [pc, #496]	; (8000bcc <MX_GPIO_Init+0x20c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a7b      	ldr	r2, [pc, #492]	; (8000bcc <MX_GPIO_Init+0x20c>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <MX_GPIO_Init+0x20c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	4b75      	ldr	r3, [pc, #468]	; (8000bcc <MX_GPIO_Init+0x20c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a74      	ldr	r2, [pc, #464]	; (8000bcc <MX_GPIO_Init+0x20c>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a6d      	ldr	r2, [pc, #436]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a66      	ldr	r2, [pc, #408]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a5f      	ldr	r2, [pc, #380]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a58      	ldr	r2, [pc, #352]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000a84:	4852      	ldr	r0, [pc, #328]	; (8000bd0 <MX_GPIO_Init+0x210>)
 8000a86:	f001 fa2d 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4851      	ldr	r0, [pc, #324]	; (8000bd4 <MX_GPIO_Init+0x214>)
 8000a90:	f001 fa28 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	484f      	ldr	r0, [pc, #316]	; (8000bd8 <MX_GPIO_Init+0x218>)
 8000a9a:	f001 fa23 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aa4:	484d      	ldr	r0, [pc, #308]	; (8000bdc <MX_GPIO_Init+0x21c>)
 8000aa6:	f001 fa1d 	bl	8001ee4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8;
 8000aaa:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4843      	ldr	r0, [pc, #268]	; (8000bd0 <MX_GPIO_Init+0x210>)
 8000ac4:	f001 f872 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	483d      	ldr	r0, [pc, #244]	; (8000bd4 <MX_GPIO_Init+0x214>)
 8000ae0:	f001 f864 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af4:	2305      	movs	r3, #5
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4835      	ldr	r0, [pc, #212]	; (8000bd4 <MX_GPIO_Init+0x214>)
 8000b00:	f001 f854 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b08:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <MX_GPIO_Init+0x218>)
 8000b1a:	f001 f847 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0x218>)
 8000b36:	f001 f839 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <MX_GPIO_Init+0x220>)
 8000b4e:	f001 f82d 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_GPIO_Init+0x220>)
 8000b70:	f001 f81c 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b74:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b78:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x21c>)
 8000b8e:	f001 f80d 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b92:	2320      	movs	r3, #32
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_GPIO_Init+0x21c>)
 8000ba6:	f001 f801 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_GPIO_Init+0x210>)
 8000bc0:	f000 fff4 	bl	8001bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40020400 	.word	0x40020400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f000 ff7a 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_ADC_MspInit+0x7c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d127      	bne.n	8000cb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_ADC_MspInit+0x80>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_ADC_MspInit+0x84>)
 8000cae:	f000 ff7d 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_I2C_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_I2C_MspInit+0x8c>)
 8000d24:	f000 ff42 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <HAL_I2S_MspInit+0xf0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d15a      	bne.n	8000e3e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d8c:	23c0      	movs	r3, #192	; 0xc0
 8000d8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fc53 	bl	8005644 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000da4:	f7ff ff1e 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_I2S_MspInit+0xf4>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <HAL_I2S_MspInit+0xf8>)
 8000e18:	f000 fec8 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_I2S_MspInit+0xfc>)
 8000e3a:	f000 feb7 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3738      	adds	r7, #56	; 0x38
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40003c00 	.word	0x40003c00
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020800 	.word	0x40020800

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a19      	ldr	r2, [pc, #100]	; (8000edc <HAL_SPI_MspInit+0x84>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d12b      	bne.n	8000ed2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eb2:	23e0      	movs	r3, #224	; 0xe0
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000ece:	f000 fe6d 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12b      	bne.n	8000f62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f42:	230c      	movs	r3, #12
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f52:	2307      	movs	r3, #7
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f5e:	f000 fe25 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8d0 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <OTG_FS_IRQHandler+0x10>)
 8000fd2:	f001 fa81 	bl	80024d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000618 	.word	0x20000618

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f008 feea 	bl	8009de8 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000234 	.word	0x20000234
 8001048:	20000b40 	.word	0x20000b40

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f008 fea9 	bl	8009df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fa6b 	bl	800057c <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010b4:	0800a5f0 	.word	0x0800a5f0
  ldr r2, =_sbss
 80010b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010bc:	20000b40 	.word	0x20000b40

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fd1b 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd7a 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd33 	bl	8001b92 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 fcfb 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	20000238 	.word	0x20000238

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000238 	.word	0x20000238

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e033      	b.n	800126e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fd16 	bl	8000c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001236:	f023 0302 	bic.w	r3, r3, #2
 800123a:	f043 0202 	orr.w	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 faa4 	bl	8001790 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
 800125e:	e001      	b.n	8001264 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Start+0x1a>
 800128e:	2302      	movs	r3, #2
 8001290:	e0b2      	b.n	80013f8 <HAL_ADC_Start+0x180>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d018      	beq.n	80012da <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_ADC_Start+0x18c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_ADC_Start+0x190>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0c9a      	lsrs	r2, r3, #18
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d17a      	bne.n	80013de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001312:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001326:	d106      	bne.n	8001336 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f023 0206 	bic.w	r2, r3, #6
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
 8001334:	e002      	b.n	800133c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_ADC_Start+0x194>)
 8001346:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001350:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12a      	bne.n	80013b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <HAL_ADC_Start+0x198>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d015      	beq.n	8001394 <HAL_ADC_Start+0x11c>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_ADC_Start+0x19c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d105      	bne.n	800137e <HAL_ADC_Start+0x106>
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_ADC_Start+0x194>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a25      	ldr	r2, [pc, #148]	; (8001418 <HAL_ADC_Start+0x1a0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d136      	bne.n	80013f6 <HAL_ADC_Start+0x17e>
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_ADC_Start+0x194>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d130      	bne.n	80013f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d129      	bne.n	80013f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	e020      	b.n	80013f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a15      	ldr	r2, [pc, #84]	; (8001410 <HAL_ADC_Start+0x198>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d11b      	bne.n	80013f6 <HAL_ADC_Start+0x17e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d114      	bne.n	80013f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e00b      	b.n	80013f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f043 0210 	orr.w	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	20000000 	.word	0x20000000
 8001408:	431bde83 	.word	0x431bde83
 800140c:	40012300 	.word	0x40012300
 8001410:	40012000 	.word	0x40012000
 8001414:	40012100 	.word	0x40012100
 8001418:	40012200 	.word	0x40012200

0800141c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001438:	d113      	bne.n	8001462 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001448:	d10b      	bne.n	8001462 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f043 0220 	orr.w	r2, r3, #32
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e063      	b.n	800152a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001462:	f7ff fe95 	bl	8001190 <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001468:	e021      	b.n	80014ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d01d      	beq.n	80014ae <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <HAL_ADC_PollForConversion+0x6c>
 8001478:	f7ff fe8a 	bl	8001190 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d212      	bcs.n	80014ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b02      	cmp	r3, #2
 8001494:	d00b      	beq.n	80014ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f043 0204 	orr.w	r2, r3, #4
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e03d      	b.n	800152a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d1d6      	bne.n	800146a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f06f 0212 	mvn.w	r2, #18
 80014c4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d123      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11f      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1c>
 8001564:	2302      	movs	r3, #2
 8001566:	e105      	b.n	8001774 <HAL_ADC_ConfigChannel+0x228>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d925      	bls.n	80015c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68d9      	ldr	r1, [r3, #12]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	3b1e      	subs	r3, #30
 800158e:	2207      	movs	r2, #7
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43da      	mvns	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d9      	ldr	r1, [r3, #12]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4403      	add	r3, r0
 80015b6:	3b1e      	subs	r3, #30
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e022      	b.n	800160a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	2207      	movs	r2, #7
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	400a      	ands	r2, r1
 80015e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4403      	add	r3, r0
 8001600:	409a      	lsls	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b06      	cmp	r3, #6
 8001610:	d824      	bhi.n	800165c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b05      	subs	r3, #5
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b05      	subs	r3, #5
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
 800165a:	e04c      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d824      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b23      	subs	r3, #35	; 0x23
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43da      	mvns	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b23      	subs	r3, #35	; 0x23
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	e023      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b41      	subs	r3, #65	; 0x41
 80016c0:	221f      	movs	r2, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b41      	subs	r3, #65	; 0x41
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_ADC_ConfigChannel+0x234>)
 80016f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <HAL_ADC_ConfigChannel+0x238>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d109      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1cc>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b12      	cmp	r3, #18
 800170a:	d105      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_ADC_ConfigChannel+0x238>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d123      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d003      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x1e6>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b11      	cmp	r3, #17
 8001730:	d11b      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d111      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_ADC_ConfigChannel+0x23c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_ADC_ConfigChannel+0x240>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9a      	lsrs	r2, r3, #18
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800175c:	e002      	b.n	8001764 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3b01      	subs	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f9      	bne.n	800175e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40012300 	.word	0x40012300
 8001784:	40012000 	.word	0x40012000
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001798:	4b79      	ldr	r3, [pc, #484]	; (8001980 <ADC_Init+0x1f0>)
 800179a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	021a      	lsls	r2, r3, #8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	4a58      	ldr	r2, [pc, #352]	; (8001984 <ADC_Init+0x1f4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d022      	beq.n	800186e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6899      	ldr	r1, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e00f      	b.n	800188e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800187c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800188c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0202 	bic.w	r2, r2, #2
 800189c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7e1b      	ldrb	r3, [r3, #24]
 80018a8:	005a      	lsls	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01b      	beq.n	80018f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6859      	ldr	r1, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	3b01      	subs	r3, #1
 80018e8:	035a      	lsls	r2, r3, #13
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	e007      	b.n	8001904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001902:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	3b01      	subs	r3, #1
 8001920:	051a      	lsls	r2, r3, #20
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001946:	025a      	lsls	r2, r3, #9
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	029a      	lsls	r2, r3, #10
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40012300 	.word	0x40012300
 8001984:	0f000001 	.word	0x0f000001

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e16b      	b.n	8001ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 815a 	bne.w	8001e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d005      	beq.n	8001bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d130      	bne.n	8001c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d017      	beq.n	8001c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	69b9      	ldr	r1, [r7, #24]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80b4 	beq.w	8001e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4e:	4a5b      	ldr	r2, [pc, #364]	; (8001ebc <HAL_GPIO_Init+0x310>)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x314>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <HAL_GPIO_Init+0x226>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_GPIO_Init+0x318>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x222>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <HAL_GPIO_Init+0x31c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x21e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x21a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4e      	ldr	r2, [pc, #312]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x216>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4d      	ldr	r2, [pc, #308]	; (8001ed4 <HAL_GPIO_Init+0x328>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x212>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <HAL_GPIO_Init+0x32c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x20e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	; (8001edc <HAL_GPIO_Init+0x330>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x20a>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00e      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001db6:	2308      	movs	r3, #8
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_GPIO_Init+0x310>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f ae90 	bls.w	8001bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40021c00 	.word	0x40021c00
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af02      	add	r7, sp, #8
 8001f1c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e059      	b.n	8001fdc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f007 fbb0 	bl	80096a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f56:	d102      	bne.n	8001f5e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f9b9 	bl	80062da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7c1a      	ldrb	r2, [r3, #16]
 8001f70:	f88d 2000 	strb.w	r2, [sp]
 8001f74:	3304      	adds	r3, #4
 8001f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f78:	f004 f93a 	bl	80061f0 <USB_CoreInit>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e026      	b.n	8001fdc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 f9b1 	bl	80062fc <USB_SetCurrentMode>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e017      	b.n	8001fdc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7c1a      	ldrb	r2, [r3, #16]
 8001fb4:	f88d 2000 	strb.w	r2, [sp]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fbc:	f004 fb54 	bl	8006668 <USB_HostInit>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e004      	b.n	8001fdc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af04      	add	r7, sp, #16
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	70fb      	strb	r3, [r7, #3]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	70bb      	strb	r3, [r7, #2]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001ffe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002000:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_HCD_HC_Init+0x2c>
 800200c:	2302      	movs	r3, #2
 800200e:	e09d      	b.n	800214c <HAL_HCD_HC_Init+0x168>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	3319      	adds	r3, #25
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3314      	adds	r3, #20
 800203c:	787a      	ldrb	r2, [r7, #1]
 800203e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	3315      	adds	r3, #21
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3326      	adds	r3, #38	; 0x26
 8002064:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002068:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	78bb      	ldrb	r3, [r7, #2]
 800206e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002072:	b2d8      	uxtb	r0, r3
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3316      	adds	r3, #22
 8002082:	4602      	mov	r2, r0
 8002084:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fbc8 	bl	8002820 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002090:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002094:	2b00      	cmp	r3, #0
 8002096:	da0a      	bge.n	80020ae <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3317      	adds	r3, #23
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e009      	b.n	80020c2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3317      	adds	r3, #23
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fc32 	bl	8006930 <USB_GetHostSpeed>
 80020cc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80020ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10b      	bne.n	80020ee <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80020d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_HCD_HC_Init+0x10a>
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d104      	bne.n	80020ee <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2bbc      	cmp	r3, #188	; 0xbc
 80020e8:	d901      	bls.n	80020ee <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80020ea:	23bc      	movs	r3, #188	; 0xbc
 80020ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3318      	adds	r3, #24
 80020fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	b298      	uxth	r0, r3
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3328      	adds	r3, #40	; 0x28
 8002118:	4602      	mov	r2, r0
 800211a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	b29b      	uxth	r3, r3
 8002124:	787c      	ldrb	r4, [r7, #1]
 8002126:	78ba      	ldrb	r2, [r7, #2]
 8002128:	78f9      	ldrb	r1, [r7, #3]
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4623      	mov	r3, r4
 800213a:	f004 fc21 	bl	8006980 <USB_HC_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd90      	pop	{r4, r7, pc}

08002154 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_HCD_HC_Halt+0x1e>
 800216e:	2302      	movs	r3, #2
 8002170:	e00f      	b.n	8002192 <HAL_HCD_HC_Halt+0x3e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f004 ffb3 	bl	80070ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	70fb      	strb	r3, [r7, #3]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70bb      	strb	r3, [r7, #2]
 80021b2:	4613      	mov	r3, r2
 80021b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3317      	adds	r3, #23
 80021c6:	78ba      	ldrb	r2, [r7, #2]
 80021c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3326      	adds	r3, #38	; 0x26
 80021da:	787a      	ldrb	r2, [r7, #1]
 80021dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021de:	7c3b      	ldrb	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d114      	bne.n	800220e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	332a      	adds	r3, #42	; 0x2a
 80021f4:	2203      	movs	r2, #3
 80021f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3319      	adds	r3, #25
 8002208:	7f3a      	ldrb	r2, [r7, #28]
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e009      	b.n	8002222 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	332a      	adds	r3, #42	; 0x2a
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002222:	787b      	ldrb	r3, [r7, #1]
 8002224:	2b03      	cmp	r3, #3
 8002226:	f200 8102 	bhi.w	800242e <HAL_HCD_HC_SubmitRequest+0x292>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <HAL_HCD_HC_SubmitRequest+0x94>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002241 	.word	0x08002241
 8002234:	08002419 	.word	0x08002419
 8002238:	08002305 	.word	0x08002305
 800223c:	0800238f 	.word	0x0800238f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002240:	7c3b      	ldrb	r3, [r7, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80f5 	bne.w	8002432 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002248:	78bb      	ldrb	r3, [r7, #2]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d12d      	bne.n	80022aa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800224e:	8b3b      	ldrh	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	333d      	adds	r3, #61	; 0x3d
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333d      	adds	r3, #61	; 0x3d
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	332a      	adds	r3, #42	; 0x2a
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002292:	e0ce      	b.n	8002432 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	332a      	adds	r3, #42	; 0x2a
 80022a4:	2202      	movs	r2, #2
 80022a6:	701a      	strb	r2, [r3, #0]
      break;
 80022a8:	e0c3      	b.n	8002432 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	331a      	adds	r3, #26
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 80b8 	bne.w	8002432 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	333c      	adds	r3, #60	; 0x3c
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	332a      	adds	r3, #42	; 0x2a
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
      break;
 80022ec:	e0a1      	b.n	8002432 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	332a      	adds	r3, #42	; 0x2a
 80022fe:	2202      	movs	r2, #2
 8002300:	701a      	strb	r2, [r3, #0]
      break;
 8002302:	e096      	b.n	8002432 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002304:	78bb      	ldrb	r3, [r7, #2]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d120      	bne.n	800234c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	333d      	adds	r3, #61	; 0x3d
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	332a      	adds	r3, #42	; 0x2a
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002334:	e07e      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	332a      	adds	r3, #42	; 0x2a
 8002346:	2202      	movs	r2, #2
 8002348:	701a      	strb	r2, [r3, #0]
      break;
 800234a:	e073      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	333c      	adds	r3, #60	; 0x3c
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	332a      	adds	r3, #42	; 0x2a
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
      break;
 8002376:	e05d      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	332a      	adds	r3, #42	; 0x2a
 8002388:	2202      	movs	r2, #2
 800238a:	701a      	strb	r2, [r3, #0]
      break;
 800238c:	e052      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800238e:	78bb      	ldrb	r3, [r7, #2]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d120      	bne.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	333d      	adds	r3, #61	; 0x3d
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10a      	bne.n	80023c0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	332a      	adds	r3, #42	; 0x2a
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023be:	e039      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	332a      	adds	r3, #42	; 0x2a
 80023d0:	2202      	movs	r2, #2
 80023d2:	701a      	strb	r2, [r3, #0]
      break;
 80023d4:	e02e      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	333c      	adds	r3, #60	; 0x3c
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	332a      	adds	r3, #42	; 0x2a
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
      break;
 8002400:	e018      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	332a      	adds	r3, #42	; 0x2a
 8002412:	2202      	movs	r2, #2
 8002414:	701a      	strb	r2, [r3, #0]
      break;
 8002416:	e00d      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	332a      	adds	r3, #42	; 0x2a
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
      break;
 800242c:	e002      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002432:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	332c      	adds	r3, #44	; 0x2c
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	8b39      	ldrh	r1, [r7, #24]
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4403      	add	r3, r0
 8002458:	3334      	adds	r3, #52	; 0x34
 800245a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	334c      	adds	r3, #76	; 0x4c
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3338      	adds	r3, #56	; 0x38
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3315      	adds	r3, #21
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334d      	adds	r3, #77	; 0x4d
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3310      	adds	r3, #16
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	1d19      	adds	r1, r3, #4
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	799b      	ldrb	r3, [r3, #6]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f004 fb86 	bl	8006bd8 <USB_HC_StartXfer>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop

080024d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 f87a 	bl	80065e8 <USB_GetMode>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	f040 80fb 	bne.w	80026f2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 f83d 	bl	8006580 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80f1 	beq.w	80026f0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 f834 	bl	8006580 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002522:	d104      	bne.n	800252e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800252c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f004 f824 	bl	8006580 <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002542:	d104      	bne.n	800254e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800254c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f004 f814 	bl	8006580 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002562:	d104      	bne.n	800256e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800256c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 f804 	bl	8006580 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d103      	bne.n	800258a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2202      	movs	r2, #2
 8002588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fff6 	bl	8006580 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800259a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259e:	d120      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d113      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025ba:	2110      	movs	r1, #16
 80025bc:	6938      	ldr	r0, [r7, #16]
 80025be:	f003 fee9 	bl	8006394 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025c2:	6938      	ldr	r0, [r7, #16]
 80025c4:	f003 ff18 	bl	80063f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7a5b      	ldrb	r3, [r3, #9]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d105      	bne.n	80025dc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 f90a 	bl	80067f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f007 f8e1 	bl	80097a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ffca 	bl	8006580 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f6:	d102      	bne.n	80025fe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f001 fd33 	bl	8004064 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ffbc 	bl	8006580 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b08      	cmp	r3, #8
 8002610:	d106      	bne.n	8002620 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f007 f8aa 	bl	800976c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ffab 	bl	8006580 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002634:	d139      	bne.n	80026aa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fd46 	bl	80070cc <USB_HC_ReadInterrupt>
 8002640:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e025      	b.n	8002694 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d018      	beq.n	800268e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800266e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002672:	d106      	bne.n	8002682 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f905 	bl	800288a <HCD_HC_IN_IRQHandler>
 8002680:	e005      	b.n	800268e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 ff67 	bl	800355c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	795b      	ldrb	r3, [r3, #5]
 8002698:	461a      	mov	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4293      	cmp	r3, r2
 800269e:	d3d3      	bcc.n	8002648 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 ff66 	bl	8006580 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d101      	bne.n	80026c2 <HAL_HCD_IRQHandler+0x1ea>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_HCD_IRQHandler+0x1ec>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0210 	bic.w	r2, r2, #16
 80026d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f001 fbe4 	bl	8003ea6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0210 	orr.w	r2, r2, #16
 80026ec:	619a      	str	r2, [r3, #24]
 80026ee:	e000      	b.n	80026f2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80026f0:	bf00      	nop
    }
  }
}
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_HCD_Start+0x16>
 800270a:	2302      	movs	r3, #2
 800270c:	e013      	b.n	8002736 <HAL_HCD_Start+0x3e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f004 f8ce 	bl	80068be <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fdc6 	bl	80062b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_HCD_Stop+0x16>
 8002750:	2302      	movs	r3, #2
 8002752:	e00d      	b.n	8002770 <HAL_HCD_Stop+0x32>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fe21 	bl	80073a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f004 f870 	bl	800686a <USB_ResetPort>
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	781b      	ldrb	r3, [r3, #0]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3338      	adds	r3, #56	; 0x38
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f004 f8b2 	bl	800695e <USB_GetCurrentFrame>
 80027fa:	4603      	mov	r3, r0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f004 f88d 	bl	8006930 <USB_GetHostSpeed>
 8002816:	4603      	mov	r3, r0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	331a      	adds	r3, #26
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	331b      	adds	r3, #27
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3325      	adds	r3, #37	; 0x25
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fe7c 	bl	80065a6 <USB_ReadChInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d11a      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	2304      	movs	r3, #4
 80028c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	334d      	adds	r3, #77	; 0x4d
 80028da:	2207      	movs	r2, #7
 80028dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fc01 	bl	80070ee <USB_HC_Halt>
 80028ec:	e09e      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fe55 	bl	80065a6 <USB_ReadChInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d11b      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334d      	adds	r3, #77	; 0x4d
 800292c:	2208      	movs	r2, #8
 800292e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f004 fbd8 	bl	80070ee <USB_HC_Halt>
 800293e:	e075      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fe2c 	bl	80065a6 <USB_ReadChInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d11a      	bne.n	800298e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2308      	movs	r3, #8
 8002968:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	334d      	adds	r3, #77	; 0x4d
 800297a:	2206      	movs	r2, #6
 800297c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f004 fbb1 	bl	80070ee <USB_HC_Halt>
 800298c:	e04e      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fe05 	bl	80065a6 <USB_ReadChInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d11b      	bne.n	80029e0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	; 0x4d
 80029cc:	2209      	movs	r2, #9
 80029ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 fb88 	bl	80070ee <USB_HC_Halt>
 80029de:	e025      	b.n	8002a2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fddc 	bl	80065a6 <USB_ReadChInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d119      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334d      	adds	r3, #77	; 0x4d
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 fb61 	bl	80070ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 fdb6 	bl	80065a6 <USB_ReadChInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a44:	d112      	bne.n	8002a6c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 fb4d 	bl	80070ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	f000 bd75 	b.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fd96 	bl	80065a6 <USB_ReadChInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 8128 	bne.w	8002cd6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	461a      	mov	r2, r3
 8002a94:	2320      	movs	r3, #32
 8002a96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d119      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	331b      	adds	r3, #27
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	0151      	lsls	r1, r2, #5
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	799b      	ldrb	r3, [r3, #6]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01b      	beq.n	8002b22 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3330      	adds	r3, #48	; 0x30
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	1ac9      	subs	r1, r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4403      	add	r3, r0
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	334d      	adds	r3, #77	; 0x4d
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3344      	adds	r3, #68	; 0x44
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	2301      	movs	r3, #1
 8002b5a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3326      	adds	r3, #38	; 0x26
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3326      	adds	r3, #38	; 0x26
 8002b82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d110      	bne.n	8002baa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 faac 	bl	80070ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	6093      	str	r3, [r2, #8]
 8002ba8:	e03d      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3326      	adds	r3, #38	; 0x26
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d00a      	beq.n	8002bd6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3326      	adds	r3, #38	; 0x26
 8002bd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d127      	bne.n	8002c26 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	0151      	lsls	r1, r2, #5
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	440a      	add	r2, r1
 8002bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bf4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334c      	adds	r3, #76	; 0x4c
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	334c      	adds	r3, #76	; 0x4c
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f006 fdcd 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	799b      	ldrb	r3, [r3, #6]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d13b      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3338      	adds	r3, #56	; 0x38
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4403      	add	r3, r0
 8002c4e:	3328      	adds	r3, #40	; 0x28
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	440b      	add	r3, r1
 8002c54:	1e59      	subs	r1, r3, #1
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4403      	add	r3, r0
 8002c64:	3328      	adds	r3, #40	; 0x28
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8470 	beq.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	333c      	adds	r3, #60	; 0x3c
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2d8      	uxtb	r0, r3
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	333c      	adds	r3, #60	; 0x3c
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	f000 bc58 	b.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	333c      	adds	r3, #60	; 0x3c
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2d8      	uxtb	r0, r3
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	333c      	adds	r3, #60	; 0x3c
 8002cce:	4602      	mov	r2, r0
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	f000 bc40 	b.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 fc61 	bl	80065a6 <USB_ReadChInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d131      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	331a      	adds	r3, #26
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	f040 841f 	bne.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	331b      	adds	r3, #27
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	; 0x4d
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 f9d0 	bl	80070ee <USB_HC_Halt>
 8002d4e:	f000 bc02 	b.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fc23 	bl	80065a6 <USB_ReadChInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	f040 8305 	bne.w	8003376 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	; 0x4d
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d114      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334d      	adds	r3, #77	; 0x4d
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334c      	adds	r3, #76	; 0x4c
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e2cc      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	334d      	adds	r3, #77	; 0x4d
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d114      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	334d      	adds	r3, #77	; 0x4d
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334c      	adds	r3, #76	; 0x4c
 8002df8:	2205      	movs	r2, #5
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e2ac      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	334d      	adds	r3, #77	; 0x4d
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b07      	cmp	r3, #7
 8002e12:	d00b      	beq.n	8002e2c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	; 0x4d
 8002e24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	f040 80a6 	bne.w	8002f78 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	; 0x4d
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3344      	adds	r3, #68	; 0x44
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4403      	add	r3, r0
 8002e60:	3344      	adds	r3, #68	; 0x44
 8002e62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3344      	adds	r3, #68	; 0x44
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d943      	bls.n	8002f02 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3344      	adds	r3, #68	; 0x44
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	331a      	adds	r3, #26
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d123      	bne.n	8002eec <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	331b      	adds	r3, #27
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	331c      	adds	r3, #28
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	0151      	lsls	r1, r2, #5
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334c      	adds	r3, #76	; 0x4c
 8002efc:	2204      	movs	r2, #4
 8002efe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f00:	e229      	b.n	8003356 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334c      	adds	r3, #76	; 0x4c
 8002f12:	2202      	movs	r2, #2
 8002f14:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3326      	adds	r3, #38	; 0x26
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3326      	adds	r3, #38	; 0x26
 8002f3c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	f040 8209 	bne.w	8003356 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f5a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f76:	e1ee      	b.n	8003356 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	; 0x4d
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	f040 80c8 	bne.w	8003120 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334d      	adds	r3, #77	; 0x4d
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	331b      	adds	r3, #27
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f040 81ce 	bne.w	8003358 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3326      	adds	r3, #38	; 0x26
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d16b      	bne.n	80030aa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3348      	adds	r3, #72	; 0x48
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	1c59      	adds	r1, r3, #1
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4403      	add	r3, r0
 8002ff2:	3348      	adds	r3, #72	; 0x48
 8002ff4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3348      	adds	r3, #72	; 0x48
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d943      	bls.n	8003094 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3348      	adds	r3, #72	; 0x48
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	331b      	adds	r3, #27
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3344      	adds	r3, #68	; 0x44
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d809      	bhi.n	800305e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	331c      	adds	r3, #28
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	0151      	lsls	r1, r2, #5
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	440a      	add	r2, r1
 8003074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334c      	adds	r3, #76	; 0x4c
 800308e:	2204      	movs	r2, #4
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e014      	b.n	80030be <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	334c      	adds	r3, #76	; 0x4c
 80030a4:	2202      	movs	r2, #2
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e009      	b.n	80030be <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334c      	adds	r3, #76	; 0x4c
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3326      	adds	r3, #38	; 0x26
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3326      	adds	r3, #38	; 0x26
 80030e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 8136 	bne.w	8003358 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003102:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800310a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e11b      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	334d      	adds	r3, #77	; 0x4d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b03      	cmp	r3, #3
 8003134:	f040 8081 	bne.w	800323a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	; 0x4d
 8003148:	2202      	movs	r2, #2
 800314a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	331b      	adds	r3, #27
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 80fa 	bne.w	8003358 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	334c      	adds	r3, #76	; 0x4c
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	440a      	add	r2, r1
 800318e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	0151      	lsls	r1, r2, #5
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	440a      	add	r2, r1
 80031ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	0151      	lsls	r1, r2, #5
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	440a      	add	r2, r1
 80031ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d2:	f023 0320 	bic.w	r3, r3, #32
 80031d6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3326      	adds	r3, #38	; 0x26
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3326      	adds	r3, #38	; 0x26
 80031fe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003200:	2b02      	cmp	r3, #2
 8003202:	f040 80a9 	bne.w	8003358 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800321c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003224:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e08e      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	334d      	adds	r3, #77	; 0x4d
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d143      	bne.n	80032d8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	; 0x4d
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334c      	adds	r3, #76	; 0x4c
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3326      	adds	r3, #38	; 0x26
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3326      	adds	r3, #38	; 0x26
 800329e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d159      	bne.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e03f      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334d      	adds	r3, #77	; 0x4d
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d126      	bne.n	800333c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334d      	adds	r3, #77	; 0x4d
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3344      	adds	r3, #68	; 0x44
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	1c59      	adds	r1, r3, #1
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4403      	add	r3, r0
 8003322:	3344      	adds	r3, #68	; 0x44
 8003324:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	; 0x4c
 8003336:	2204      	movs	r2, #4
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e00d      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	; 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b02      	cmp	r3, #2
 8003350:	f000 8100 	beq.w	8003554 <HCD_HC_IN_IRQHandler+0xcca>
 8003354:	e000      	b.n	8003358 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003356:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334c      	adds	r3, #76	; 0x4c
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f006 fa26 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003374:	e0ef      	b.n	8003556 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f003 f911 	bl	80065a6 <USB_ReadChInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d12f      	bne.n	80033ee <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	2340      	movs	r3, #64	; 0x40
 800339e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	334d      	adds	r3, #77	; 0x4d
 80033b0:	2205      	movs	r2, #5
 80033b2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	331a      	adds	r3, #26
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3344      	adds	r3, #68	; 0x44
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fe81 	bl	80070ee <USB_HC_Halt>
 80033ec:	e0b3      	b.n	8003556 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 f8d5 	bl	80065a6 <USB_ReadChInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	f040 80a7 	bne.w	8003556 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3326      	adds	r3, #38	; 0x26
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d11b      	bne.n	8003456 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3344      	adds	r3, #68	; 0x44
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334d      	adds	r3, #77	; 0x4d
 8003442:	2204      	movs	r2, #4
 8003444:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f003 fe4d 	bl	80070ee <USB_HC_Halt>
 8003454:	e03f      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3326      	adds	r3, #38	; 0x26
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3326      	adds	r3, #38	; 0x26
 800347c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800347e:	2b02      	cmp	r3, #2
 8003480:	d129      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3344      	adds	r3, #68	; 0x44
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	799b      	ldrb	r3, [r3, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HCD_HC_IN_IRQHandler+0xc2a>
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	331b      	adds	r3, #27
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d110      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334d      	adds	r3, #77	; 0x4d
 80034c4:	2204      	movs	r2, #4
 80034c6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 fe0c 	bl	80070ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	331b      	adds	r3, #27
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d129      	bne.n	8003540 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	331b      	adds	r3, #27
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	0151      	lsls	r1, r2, #5
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	440a      	add	r2, r1
 8003516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	440a      	add	r2, r1
 8003536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800353a:	f043 0320 	orr.w	r3, r3, #32
 800353e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2310      	movs	r3, #16
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	e000      	b.n	8003556 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003554:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f003 f813 	bl	80065a6 <USB_ReadChInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d11b      	bne.n	80035c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2304      	movs	r3, #4
 800359a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334d      	adds	r3, #77	; 0x4d
 80035ac:	2207      	movs	r2, #7
 80035ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fd98 	bl	80070ee <USB_HC_Halt>
 80035be:	f000 bc6f 	b.w	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 ffeb 	bl	80065a6 <USB_ReadChInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	f040 8082 	bne.w	80036e0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	2320      	movs	r3, #32
 80035ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3319      	adds	r3, #25
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d124      	bne.n	800364e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3319      	adds	r3, #25
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334c      	adds	r3, #76	; 0x4c
 8003628:	2202      	movs	r2, #2
 800362a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	334d      	adds	r3, #77	; 0x4d
 800363c:	2203      	movs	r2, #3
 800363e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fd50 	bl	80070ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	331a      	adds	r3, #26
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 841d 	bne.w	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	331b      	adds	r3, #27
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f040 8411 	bne.w	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3326      	adds	r3, #38	; 0x26
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d009      	beq.n	80036a8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	331b      	adds	r3, #27
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334d      	adds	r3, #77	; 0x4d
 80036b8:	2203      	movs	r2, #3
 80036ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fd12 	bl	80070ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3344      	adds	r3, #68	; 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e3df      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 ff5c 	bl	80065a6 <USB_ReadChInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d111      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	461a      	mov	r2, r3
 8003708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f003 fce9 	bl	80070ee <USB_HC_Halt>
 800371c:	e3c0      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f002 ff3d 	bl	80065a6 <USB_ReadChInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d168      	bne.n	8003808 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3344      	adds	r3, #68	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f002 ff27 	bl	80065a6 <USB_ReadChInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d112      	bne.n	8003788 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3319      	adds	r3, #25
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	461a      	mov	r2, r3
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	331b      	adds	r3, #27
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d019      	beq.n	80037d2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	331b      	adds	r3, #27
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2301      	movs	r3, #1
 80037e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334d      	adds	r3, #77	; 0x4d
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fc74 	bl	80070ee <USB_HC_Halt>
 8003806:	e34b      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f002 fec8 	bl	80065a6 <USB_ReadChInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d139      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	334d      	adds	r3, #77	; 0x4d
 8003830:	2205      	movs	r2, #5
 8003832:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	331a      	adds	r3, #26
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3319      	adds	r3, #25
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3344      	adds	r3, #68	; 0x44
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f003 fc37 	bl	80070ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	6093      	str	r3, [r2, #8]
 8003892:	e305      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f002 fe82 	bl	80065a6 <USB_ReadChInterrupts>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d11a      	bne.n	80038e2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	2308      	movs	r3, #8
 80038bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334d      	adds	r3, #77	; 0x4d
 80038ce:	2206      	movs	r2, #6
 80038d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f003 fc07 	bl	80070ee <USB_HC_Halt>
 80038e0:	e2de      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f002 fe5b 	bl	80065a6 <USB_ReadChInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d144      	bne.n	8003984 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	3344      	adds	r3, #68	; 0x44
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	334d      	adds	r3, #77	; 0x4d
 800391e:	2204      	movs	r2, #4
 8003920:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3319      	adds	r3, #25
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3318      	adds	r3, #24
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3319      	adds	r3, #25
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fbbf 	bl	80070ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	2310      	movs	r3, #16
 8003980:	6093      	str	r3, [r2, #8]
 8003982:	e28d      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f002 fe0a 	bl	80065a6 <USB_ReadChInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d169      	bne.n	8003a70 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	799b      	ldrb	r3, [r3, #6]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334d      	adds	r3, #77	; 0x4d
 80039b4:	2207      	movs	r2, #7
 80039b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fb94 	bl	80070ee <USB_HC_Halt>
 80039c6:	e049      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3344      	adds	r3, #68	; 0x44
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4403      	add	r3, r0
 80039e8:	3344      	adds	r3, #68	; 0x44
 80039ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3344      	adds	r3, #68	; 0x44
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d922      	bls.n	8003a48 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3344      	adds	r3, #68	; 0x44
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	334c      	adds	r3, #76	; 0x4c
 8003a26:	2204      	movs	r2, #4
 8003a28:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	334c      	adds	r3, #76	; 0x4c
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f005 febd 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a46:	e009      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	; 0x4c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	6093      	str	r3, [r2, #8]
 8003a6e:	e217      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fd94 	bl	80065a6 <USB_ReadChInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d11b      	bne.n	8003ac2 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334d      	adds	r3, #77	; 0x4d
 8003a9a:	2209      	movs	r2, #9
 8003a9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fb21 	bl	80070ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003abe:	6093      	str	r3, [r2, #8]
 8003ac0:	e1ee      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 fd6b 	bl	80065a6 <USB_ReadChInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	f040 81df 	bne.w	8003e9a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2302      	movs	r3, #2
 8003aec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	334d      	adds	r3, #77	; 0x4d
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 8093 	bne.w	8003c2c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	334d      	adds	r3, #77	; 0x4d
 8003b16:	2202      	movs	r2, #2
 8003b18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334c      	adds	r3, #76	; 0x4c
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3326      	adds	r3, #38	; 0x26
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d00b      	beq.n	8003b5c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3326      	adds	r3, #38	; 0x26
 8003b54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	f040 8190 	bne.w	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	799b      	ldrb	r3, [r3, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d115      	bne.n	8003b90 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	333d      	adds	r3, #61	; 0x3d
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2d8      	uxtb	r0, r3
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	333d      	adds	r3, #61	; 0x3d
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	799b      	ldrb	r3, [r3, #6]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 8171 	bne.w	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3334      	adds	r3, #52	; 0x34
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8165 	beq.w	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3334      	adds	r3, #52	; 0x34
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4403      	add	r3, r0
 8003bd2:	3328      	adds	r3, #40	; 0x28
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	440b      	add	r3, r1
 8003bd8:	1e59      	subs	r1, r3, #1
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4403      	add	r3, r0
 8003be8:	3328      	adds	r3, #40	; 0x28
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 813f 	beq.w	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	333d      	adds	r3, #61	; 0x3d
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2d8      	uxtb	r0, r3
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	333d      	adds	r3, #61	; 0x3d
 8003c26:	4602      	mov	r2, r0
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e127      	b.n	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334d      	adds	r3, #77	; 0x4d
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d120      	bne.n	8003c84 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	334d      	adds	r3, #77	; 0x4d
 8003c52:	2202      	movs	r2, #2
 8003c54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	331b      	adds	r3, #27
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 8107 	bne.w	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	334c      	adds	r3, #76	; 0x4c
 8003c7e:	2202      	movs	r2, #2
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e0fb      	b.n	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	334d      	adds	r3, #77	; 0x4d
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d13a      	bne.n	8003d10 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	334d      	adds	r3, #77	; 0x4d
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	334c      	adds	r3, #76	; 0x4c
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	331b      	adds	r3, #27
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 80d1 	bne.w	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	331b      	adds	r3, #27
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	6053      	str	r3, [r2, #4]
 8003d0e:	e0b5      	b.n	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	334d      	adds	r3, #77	; 0x4d
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d114      	bne.n	8003d50 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	334d      	adds	r3, #77	; 0x4d
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	334c      	adds	r3, #76	; 0x4c
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e095      	b.n	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334d      	adds	r3, #77	; 0x4d
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d114      	bne.n	8003d90 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	334d      	adds	r3, #77	; 0x4d
 8003d76:	2202      	movs	r2, #2
 8003d78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334c      	adds	r3, #76	; 0x4c
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e075      	b.n	8003e7c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	334d      	adds	r3, #77	; 0x4d
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b07      	cmp	r3, #7
 8003da4:	d00a      	beq.n	8003dbc <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	334d      	adds	r3, #77	; 0x4d
 8003db6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	d170      	bne.n	8003e9e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	334d      	adds	r3, #77	; 0x4d
 8003dcc:	2202      	movs	r2, #2
 8003dce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	3344      	adds	r3, #68	; 0x44
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4403      	add	r3, r0
 8003df0:	3344      	adds	r3, #68	; 0x44
 8003df2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3344      	adds	r3, #68	; 0x44
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d914      	bls.n	8003e34 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3344      	adds	r3, #68	; 0x44
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334c      	adds	r3, #76	; 0x4c
 8003e2e:	2204      	movs	r2, #4
 8003e30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e32:	e022      	b.n	8003e7a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334c      	adds	r3, #76	; 0x4c
 8003e44:	2202      	movs	r2, #2
 8003e46:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e7a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334c      	adds	r3, #76	; 0x4c
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f005 fc94 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e98:	e002      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003e9e:	bf00      	nop
  }
}
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b08a      	sub	sp, #40	; 0x28
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	0c5b      	lsrs	r3, r3, #17
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d004      	beq.n	8003eec <HCD_RXQLVL_IRQHandler+0x46>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	f000 80b6 	beq.w	8004056 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003eea:	e0b7      	b.n	800405c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80b3 	beq.w	800405a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	332c      	adds	r3, #44	; 0x2c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a7 	beq.w	800405a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3338      	adds	r3, #56	; 0x38
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	18d1      	adds	r1, r2, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4403      	add	r3, r0
 8003f30:	3334      	adds	r3, #52	; 0x34
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4299      	cmp	r1, r3
 8003f36:	f200 8083 	bhi.w	8004040 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	332c      	adds	r3, #44	; 0x2c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	b292      	uxth	r2, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f002 fabb 	bl	80064d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	332c      	adds	r3, #44	; 0x2c
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	18d1      	adds	r1, r2, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4403      	add	r3, r0
 8003f7e:	332c      	adds	r3, #44	; 0x2c
 8003f80:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3338      	adds	r3, #56	; 0x38
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	18d1      	adds	r1, r2, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4403      	add	r3, r0
 8003fa6:	3338      	adds	r3, #56	; 0x38
 8003fa8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	0cdb      	lsrs	r3, r3, #19
 8003fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fbe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3328      	adds	r3, #40	; 0x28
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d13f      	bne.n	800405a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d03c      	beq.n	800405a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ff6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ffe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	333c      	adds	r3, #60	; 0x3c
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2d8      	uxtb	r0, r3
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	333c      	adds	r3, #60	; 0x3c
 800403a:	4602      	mov	r2, r0
 800403c:	701a      	strb	r2, [r3, #0]
      break;
 800403e:	e00c      	b.n	800405a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	334c      	adds	r3, #76	; 0x4c
 8004050:	2204      	movs	r2, #4
 8004052:	701a      	strb	r2, [r3, #0]
      break;
 8004054:	e001      	b.n	800405a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800405a:	bf00      	nop
  }
}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004090:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d10b      	bne.n	80040b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f005 fb6e 	bl	8009788 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f043 0302 	orr.w	r3, r3, #2
 80040b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d132      	bne.n	8004124 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d126      	bne.n	800411e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7a5b      	ldrb	r3, [r3, #9]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d113      	bne.n	8004100 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e2:	d106      	bne.n	80040f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 fb80 	bl	80067f0 <USB_InitFSLSPClkSel>
 80040f0:	e011      	b.n	8004116 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 fb79 	bl	80067f0 <USB_InitFSLSPClkSel>
 80040fe:	e00a      	b.n	8004116 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	79db      	ldrb	r3, [r3, #7]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410e:	461a      	mov	r2, r3
 8004110:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004114:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f005 fb60 	bl	80097dc <HAL_HCD_PortEnabled_Callback>
 800411c:	e002      	b.n	8004124 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f005 fb6a 	bl	80097f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d103      	bne.n	8004136 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f043 0320 	orr.w	r3, r3, #32
 8004134:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6013      	str	r3, [r2, #0]
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e12b      	b.n	80043b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fda8 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041b0:	f001 fa20 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 80041b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4a81      	ldr	r2, [pc, #516]	; (80043c0 <HAL_I2C_Init+0x274>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d807      	bhi.n	80041d0 <HAL_I2C_Init+0x84>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a80      	ldr	r2, [pc, #512]	; (80043c4 <HAL_I2C_Init+0x278>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e006      	b.n	80041de <HAL_I2C_Init+0x92>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a7d      	ldr	r2, [pc, #500]	; (80043c8 <HAL_I2C_Init+0x27c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	bf94      	ite	ls
 80041d8:	2301      	movls	r3, #1
 80041da:	2300      	movhi	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0e7      	b.n	80043b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a78      	ldr	r2, [pc, #480]	; (80043cc <HAL_I2C_Init+0x280>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	0c9b      	lsrs	r3, r3, #18
 80041f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a6a      	ldr	r2, [pc, #424]	; (80043c0 <HAL_I2C_Init+0x274>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d802      	bhi.n	8004220 <HAL_I2C_Init+0xd4>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3301      	adds	r3, #1
 800421e:	e009      	b.n	8004234 <HAL_I2C_Init+0xe8>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	4a69      	ldr	r2, [pc, #420]	; (80043d0 <HAL_I2C_Init+0x284>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	3301      	adds	r3, #1
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	495c      	ldr	r1, [pc, #368]	; (80043c0 <HAL_I2C_Init+0x274>)
 8004250:	428b      	cmp	r3, r1
 8004252:	d819      	bhi.n	8004288 <HAL_I2C_Init+0x13c>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1e59      	subs	r1, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004268:	400b      	ands	r3, r1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_I2C_Init+0x138>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1e59      	subs	r1, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fbb1 f3f3 	udiv	r3, r1, r3
 800427c:	3301      	adds	r3, #1
 800427e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004282:	e051      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 8004284:	2304      	movs	r3, #4
 8004286:	e04f      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d111      	bne.n	80042b4 <HAL_I2C_Init+0x168>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e58      	subs	r0, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	440b      	add	r3, r1
 800429e:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e012      	b.n	80042da <HAL_I2C_Init+0x18e>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	0099      	lsls	r1, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Init+0x196>
 80042de:	2301      	movs	r3, #1
 80042e0:	e022      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <HAL_I2C_Init+0x1bc>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e58      	subs	r0, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	440b      	add	r3, r1
 80042f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	e00f      	b.n	8004328 <HAL_I2C_Init+0x1dc>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e58      	subs	r0, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	0099      	lsls	r1, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	fbb0 f3f3 	udiv	r3, r0, r3
 800431e:	3301      	adds	r3, #1
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	6809      	ldr	r1, [r1, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6911      	ldr	r1, [r2, #16]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	430b      	orrs	r3, r1
 800436a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	000186a0 	.word	0x000186a0
 80043c4:	001e847f 	.word	0x001e847f
 80043c8:	003d08ff 	.word	0x003d08ff
 80043cc:	431bde83 	.word	0x431bde83
 80043d0:	10624dd3 	.word	0x10624dd3

080043d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e128      	b.n	8004638 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a90      	ldr	r2, [pc, #576]	; (8004640 <HAL_I2S_Init+0x26c>)
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fc fca9 	bl	8000d58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800441c:	f023 030f 	bic.w	r3, r3, #15
 8004420:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2202      	movs	r2, #2
 8004428:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d060      	beq.n	80044f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800443a:	2310      	movs	r3, #16
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e001      	b.n	8004444 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b20      	cmp	r3, #32
 800444a:	d802      	bhi.n	8004452 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004452:	2001      	movs	r0, #1
 8004454:	f001 f9d8 	bl	8005808 <HAL_RCCEx_GetPeriphCLKFreq>
 8004458:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004462:	d125      	bne.n	80044b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	fbb2 f2f3 	udiv	r2, r2, r3
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	3305      	adds	r3, #5
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e01f      	b.n	80044ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	fbb2 f2f3 	udiv	r2, r2, r3
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	3305      	adds	r3, #5
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e00e      	b.n	80044ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	3305      	adds	r3, #5
 80044cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4a5c      	ldr	r2, [pc, #368]	; (8004644 <HAL_I2S_Init+0x270>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e003      	b.n	80044fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044f4:	2302      	movs	r3, #2
 80044f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d902      	bls.n	8004508 <HAL_I2S_Init+0x134>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	2bff      	cmp	r3, #255	; 0xff
 8004506:	d907      	bls.n	8004518 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f043 0210 	orr.w	r2, r3, #16
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e08f      	b.n	8004638 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	ea42 0103 	orr.w	r1, r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	430a      	orrs	r2, r1
 800452a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004536:	f023 030f 	bic.w	r3, r3, #15
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6851      	ldr	r1, [r2, #4]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6892      	ldr	r2, [r2, #8]
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68d2      	ldr	r2, [r2, #12]
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6992      	ldr	r2, [r2, #24]
 800454e:	430a      	orrs	r2, r1
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d161      	bne.n	8004628 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a38      	ldr	r2, [pc, #224]	; (8004648 <HAL_I2S_Init+0x274>)
 8004568:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <HAL_I2S_Init+0x278>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_I2S_Init+0x1a4>
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <HAL_I2S_Init+0x27c>)
 8004576:	e001      	b.n	800457c <HAL_I2S_Init+0x1a8>
 8004578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	4932      	ldr	r1, [pc, #200]	; (800464c <HAL_I2S_Init+0x278>)
 8004584:	428a      	cmp	r2, r1
 8004586:	d101      	bne.n	800458c <HAL_I2S_Init+0x1b8>
 8004588:	4a31      	ldr	r2, [pc, #196]	; (8004650 <HAL_I2S_Init+0x27c>)
 800458a:	e001      	b.n	8004590 <HAL_I2S_Init+0x1bc>
 800458c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004590:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004594:	f023 030f 	bic.w	r3, r3, #15
 8004598:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2b      	ldr	r2, [pc, #172]	; (800464c <HAL_I2S_Init+0x278>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <HAL_I2S_Init+0x1d4>
 80045a4:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_I2S_Init+0x27c>)
 80045a6:	e001      	b.n	80045ac <HAL_I2S_Init+0x1d8>
 80045a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ac:	2202      	movs	r2, #2
 80045ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <HAL_I2S_Init+0x278>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_I2S_Init+0x1ea>
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <HAL_I2S_Init+0x27c>)
 80045bc:	e001      	b.n	80045c2 <HAL_I2S_Init+0x1ee>
 80045be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ce:	d003      	beq.n	80045d8 <HAL_I2S_Init+0x204>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80045d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	e001      	b.n	80045e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045ee:	4313      	orrs	r3, r2
 80045f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004602:	4313      	orrs	r3, r2
 8004604:	b29a      	uxth	r2, r3
 8004606:	897b      	ldrh	r3, [r7, #10]
 8004608:	4313      	orrs	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004610:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a0d      	ldr	r2, [pc, #52]	; (800464c <HAL_I2S_Init+0x278>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_I2S_Init+0x24c>
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_I2S_Init+0x27c>)
 800461e:	e001      	b.n	8004624 <HAL_I2S_Init+0x250>
 8004620:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004624:	897a      	ldrh	r2, [r7, #10]
 8004626:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	0800474b 	.word	0x0800474b
 8004644:	cccccccd 	.word	0xcccccccd
 8004648:	08004861 	.word	0x08004861
 800464c:	40003800 	.word	0x40003800
 8004650:	40003400 	.word	0x40003400

08004654 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	881a      	ldrh	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ffb8 	bl	8004654 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	b292      	uxth	r2, r2
 8004700:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10e      	bne.n	8004742 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004732:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff93 	bl	8004668 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b04      	cmp	r3, #4
 8004764:	d13a      	bne.n	80047dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d109      	bne.n	8004784 <I2S_IRQHandler+0x3a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d102      	bne.n	8004784 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ffb4 	bl	80046ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d126      	bne.n	80047dc <I2S_IRQHandler+0x92>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b20      	cmp	r3, #32
 800479a:	d11f      	bne.n	80047dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ff50 	bl	800467c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d136      	bne.n	8004856 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d109      	bne.n	8004806 <I2S_IRQHandler+0xbc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b80      	cmp	r3, #128	; 0x80
 80047fe:	d102      	bne.n	8004806 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff45 	bl	8004690 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d122      	bne.n	8004856 <I2S_IRQHandler+0x10c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b20      	cmp	r3, #32
 800481c:	d11b      	bne.n	8004856 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800482c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	f043 0204 	orr.w	r2, r3, #4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ff13 	bl	800467c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a92      	ldr	r2, [pc, #584]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800487a:	4b92      	ldr	r3, [pc, #584]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800487c:	e001      	b.n	8004882 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800487e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a8b      	ldr	r2, [pc, #556]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004898:	4b8a      	ldr	r3, [pc, #552]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800489a:	e001      	b.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800489c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ac:	d004      	beq.n	80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 8099 	bne.w	80049ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f925 	bl	8004b1c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9c8 	bl	8004c7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d13a      	bne.n	800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d035      	beq.n	800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800490a:	4b6e      	ldr	r3, [pc, #440]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800490c:	e001      	b.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800490e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4969      	ldr	r1, [pc, #420]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800491a:	428b      	cmp	r3, r1
 800491c:	d101      	bne.n	8004922 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800491e:	4b69      	ldr	r3, [pc, #420]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004920:	e001      	b.n	8004926 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800492a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800493a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fe88 	bl	800467c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b08      	cmp	r3, #8
 8004974:	f040 80c3 	bne.w	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80bd 	beq.w	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004992:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a49      	ldr	r2, [pc, #292]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800499e:	4b49      	ldr	r3, [pc, #292]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049a0:	e001      	b.n	80049a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80049a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4944      	ldr	r1, [pc, #272]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ae:	428b      	cmp	r3, r1
 80049b0:	d101      	bne.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049b2:	4b44      	ldr	r3, [pc, #272]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b4:	e001      	b.n	80049ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe4a 	bl	800467c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049e8:	e089      	b.n	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8be 	bl	8004b80 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8fd 	bl	8004c18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d12f      	bne.n	8004a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d02a      	beq.n	8004a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a40:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a4e:	e001      	b.n	8004a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4919      	ldr	r1, [pc, #100]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d101      	bne.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a62:	e001      	b.n	8004a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f043 0202 	orr.w	r2, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fdfa 	bl	800467c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d136      	bne.n	8004b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d031      	beq.n	8004b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa8:	e001      	b.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4902      	ldr	r1, [pc, #8]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ab6:	428b      	cmp	r3, r1
 8004ab8:	d106      	bne.n	8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004aba:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004abc:	e006      	b.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004abe:	bf00      	nop
 8004ac0:	40003800 	.word	0x40003800
 8004ac4:	40003400 	.word	0x40003400
 8004ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ad0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ae0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f043 0204 	orr.w	r2, r3, #4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fdc0 	bl	800467c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004afc:	e000      	b.n	8004b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004afe:	bf00      	nop
}
 8004b00:	bf00      	nop
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	1c99      	adds	r1, r3, #2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6251      	str	r1, [r2, #36]	; 0x24
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ffc9 	bl	8004b08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	1c99      	adds	r1, r3, #2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6251      	str	r1, [r2, #36]	; 0x24
 8004b92:	8819      	ldrh	r1, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <I2SEx_TxISR_I2SExt+0x90>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d101      	bne.n	8004ba2 <I2SEx_TxISR_I2SExt+0x22>
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <I2SEx_TxISR_I2SExt+0x94>)
 8004ba0:	e001      	b.n	8004ba6 <I2SEx_TxISR_I2SExt+0x26>
 8004ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d121      	bne.n	8004c06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <I2SEx_TxISR_I2SExt+0x90>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <I2SEx_TxISR_I2SExt+0x50>
 8004bcc:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <I2SEx_TxISR_I2SExt+0x94>)
 8004bce:	e001      	b.n	8004bd4 <I2SEx_TxISR_I2SExt+0x54>
 8004bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	490d      	ldr	r1, [pc, #52]	; (8004c10 <I2SEx_TxISR_I2SExt+0x90>)
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	d101      	bne.n	8004be4 <I2SEx_TxISR_I2SExt+0x64>
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <I2SEx_TxISR_I2SExt+0x94>)
 8004be2:	e001      	b.n	8004be8 <I2SEx_TxISR_I2SExt+0x68>
 8004be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff81 	bl	8004b08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40003800 	.word	0x40003800
 8004c14:	40003400 	.word	0x40003400

08004c18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68d8      	ldr	r0, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	1c99      	adds	r1, r3, #2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c30:	b282      	uxth	r2, r0
 8004c32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d113      	bne.n	8004c74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff4a 	bl	8004b08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <I2SEx_RxISR_I2SExt+0x90>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d101      	bne.n	8004c92 <I2SEx_RxISR_I2SExt+0x16>
 8004c8e:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <I2SEx_RxISR_I2SExt+0x94>)
 8004c90:	e001      	b.n	8004c96 <I2SEx_RxISR_I2SExt+0x1a>
 8004c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c96:	68d8      	ldr	r0, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	1c99      	adds	r1, r3, #2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ca2:	b282      	uxth	r2, r0
 8004ca4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d121      	bne.n	8004d02 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <I2SEx_RxISR_I2SExt+0x90>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <I2SEx_RxISR_I2SExt+0x50>
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <I2SEx_RxISR_I2SExt+0x94>)
 8004cca:	e001      	b.n	8004cd0 <I2SEx_RxISR_I2SExt+0x54>
 8004ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	490d      	ldr	r1, [pc, #52]	; (8004d0c <I2SEx_RxISR_I2SExt+0x90>)
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	d101      	bne.n	8004ce0 <I2SEx_RxISR_I2SExt+0x64>
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <I2SEx_RxISR_I2SExt+0x94>)
 8004cde:	e001      	b.n	8004ce4 <I2SEx_RxISR_I2SExt+0x68>
 8004ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff03 	bl	8004b08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40003800 	.word	0x40003800
 8004d10:	40003400 	.word	0x40003400

08004d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e267      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d075      	beq.n	8004e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d32:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d00c      	beq.n	8004d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3e:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d112      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d4a:	4b82      	ldr	r3, [pc, #520]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d56:	d10b      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	4b7e      	ldr	r3, [pc, #504]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05b      	beq.n	8004e1c <HAL_RCC_OscConfig+0x108>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d157      	bne.n	8004e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e242      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d106      	bne.n	8004d88 <HAL_RCC_OscConfig+0x74>
 8004d7a:	4b76      	ldr	r3, [pc, #472]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a75      	ldr	r2, [pc, #468]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e01d      	b.n	8004dc4 <HAL_RCC_OscConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x98>
 8004d92:	4b70      	ldr	r3, [pc, #448]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a6f      	ldr	r2, [pc, #444]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b6d      	ldr	r3, [pc, #436]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6c      	ldr	r2, [pc, #432]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0xb0>
 8004dac:	4b69      	ldr	r3, [pc, #420]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a68      	ldr	r2, [pc, #416]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a65      	ldr	r2, [pc, #404]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc f9e0 	bl	8001190 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fc f9dc 	bl	8001190 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e207      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de6:	4b5b      	ldr	r3, [pc, #364]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xc0>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fc f9cc 	bl	8001190 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fc f9c8 	bl	8001190 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e1f3      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0e:	4b51      	ldr	r3, [pc, #324]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0xe8>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d063      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e2a:	4b4a      	ldr	r3, [pc, #296]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d11c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e42:	4b44      	ldr	r3, [pc, #272]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d116      	bne.n	8004e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4e:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_RCC_OscConfig+0x152>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e1c7      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4937      	ldr	r1, [pc, #220]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	e03a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e84:	4b34      	ldr	r3, [pc, #208]	; (8004f58 <HAL_RCC_OscConfig+0x244>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8a:	f7fc f981 	bl	8001190 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e92:	f7fc f97d 	bl	8001190 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e1a8      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb0:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4925      	ldr	r1, [pc, #148]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]
 8004ec4:	e015      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <HAL_RCC_OscConfig+0x244>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fc f960 	bl	8001190 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed4:	f7fc f95c 	bl	8001190 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e187      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee6:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d036      	beq.n	8004f6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_RCC_OscConfig+0x248>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fc f940 	bl	8001190 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f14:	f7fc f93c 	bl	8001190 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e167      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_OscConfig+0x240>)
 8004f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x200>
 8004f32:	e01b      	b.n	8004f6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCC_OscConfig+0x248>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3a:	f7fc f929 	bl	8001190 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f40:	e00e      	b.n	8004f60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f42:	f7fc f925 	bl	8001190 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d907      	bls.n	8004f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e150      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	42470000 	.word	0x42470000
 8004f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	4b88      	ldr	r3, [pc, #544]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ea      	bne.n	8004f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8097 	beq.w	80050a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4b81      	ldr	r3, [pc, #516]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	4b7d      	ldr	r3, [pc, #500]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4a7c      	ldr	r2, [pc, #496]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	4b7a      	ldr	r3, [pc, #488]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	4b77      	ldr	r3, [pc, #476]	; (8005188 <HAL_RCC_OscConfig+0x474>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d118      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb6:	4b74      	ldr	r3, [pc, #464]	; (8005188 <HAL_RCC_OscConfig+0x474>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a73      	ldr	r2, [pc, #460]	; (8005188 <HAL_RCC_OscConfig+0x474>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fc f8e5 	bl	8001190 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fca:	f7fc f8e1 	bl	8001190 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e10c      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_RCC_OscConfig+0x474>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0x2ea>
 8004ff0:	4b64      	ldr	r3, [pc, #400]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4a63      	ldr	r2, [pc, #396]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffc:	e01c      	b.n	8005038 <HAL_RCC_OscConfig+0x324>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b05      	cmp	r3, #5
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x30c>
 8005006:	4b5f      	ldr	r3, [pc, #380]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	4a5e      	ldr	r2, [pc, #376]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 800500c:	f043 0304 	orr.w	r3, r3, #4
 8005010:	6713      	str	r3, [r2, #112]	; 0x70
 8005012:	4b5c      	ldr	r3, [pc, #368]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	4a5b      	ldr	r2, [pc, #364]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6713      	str	r3, [r2, #112]	; 0x70
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0x324>
 8005020:	4b58      	ldr	r3, [pc, #352]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a57      	ldr	r2, [pc, #348]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
 800502c:	4b55      	ldr	r3, [pc, #340]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4a54      	ldr	r2, [pc, #336]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005032:	f023 0304 	bic.w	r3, r3, #4
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fc f8a6 	bl	8001190 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fc f8a2 	bl	8001190 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0cb      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	4b49      	ldr	r3, [pc, #292]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ee      	beq.n	8005048 <HAL_RCC_OscConfig+0x334>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506c:	f7fc f890 	bl	8001190 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005072:	e00a      	b.n	800508a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f7fc f88c 	bl	8001190 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0b5      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800508a:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1ee      	bne.n	8005074 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d105      	bne.n	80050a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509c:	4b39      	ldr	r3, [pc, #228]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	4a38      	ldr	r2, [pc, #224]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 80050a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80a1 	beq.w	80051f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b2:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d05c      	beq.n	8005178 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d141      	bne.n	800514a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c6:	4b31      	ldr	r3, [pc, #196]	; (800518c <HAL_RCC_OscConfig+0x478>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fc f860 	bl	8001190 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fc f85c 	bl	8001190 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e087      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	3b01      	subs	r3, #1
 800510c:	041b      	lsls	r3, r3, #16
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	491b      	ldr	r1, [pc, #108]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <HAL_RCC_OscConfig+0x478>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005122:	f7fc f835 	bl	8001190 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512a:	f7fc f831 	bl	8001190 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e05c      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x416>
 8005148:	e054      	b.n	80051f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_RCC_OscConfig+0x478>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fc f81e 	bl	8001190 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005158:	f7fc f81a 	bl	8001190 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e045      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCC_OscConfig+0x470>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x444>
 8005176:	e03d      	b.n	80051f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d107      	bne.n	8005190 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e038      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
 8005184:	40023800 	.word	0x40023800
 8005188:	40007000 	.word	0x40007000
 800518c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x4ec>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d028      	beq.n	80051f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d121      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d11a      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d111      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	3b01      	subs	r3, #1
 80051da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800

08005204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0cc      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005218:	4b68      	ldr	r3, [pc, #416]	; (80053bc <HAL_RCC_ClockConfig+0x1b8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d90c      	bls.n	8005240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b65      	ldr	r3, [pc, #404]	; (80053bc <HAL_RCC_ClockConfig+0x1b8>)
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b63      	ldr	r3, [pc, #396]	; (80053bc <HAL_RCC_ClockConfig+0x1b8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0b8      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d020      	beq.n	800528e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4a58      	ldr	r2, [pc, #352]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005270:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4a52      	ldr	r2, [pc, #328]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800527a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800527c:	4b50      	ldr	r3, [pc, #320]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	494d      	ldr	r1, [pc, #308]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d044      	beq.n	8005324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d107      	bne.n	80052b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a2:	4b47      	ldr	r3, [pc, #284]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d119      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e07f      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d003      	beq.n	80052c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d107      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06f      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d2:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e067      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e2:	4b37      	ldr	r3, [pc, #220]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 0203 	bic.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4934      	ldr	r1, [pc, #208]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f4:	f7fb ff4c 	bl	8001190 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fc:	f7fb ff48 	bl	8001190 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e04f      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 020c 	and.w	r2, r3, #12
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	429a      	cmp	r2, r3
 8005322:	d1eb      	bne.n	80052fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005324:	4b25      	ldr	r3, [pc, #148]	; (80053bc <HAL_RCC_ClockConfig+0x1b8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d20c      	bcs.n	800534c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b20      	ldr	r3, [pc, #128]	; (80053bc <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e032      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005358:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4916      	ldr	r1, [pc, #88]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	490e      	ldr	r1, [pc, #56]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800538a:	f000 f821 	bl	80053d0 <HAL_RCC_GetSysClockFreq>
 800538e:	4602      	mov	r2, r0
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	490a      	ldr	r1, [pc, #40]	; (80053c4 <HAL_RCC_ClockConfig+0x1c0>)
 800539c:	5ccb      	ldrb	r3, [r1, r3]
 800539e:	fa22 f303 	lsr.w	r3, r2, r3
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_RCC_ClockConfig+0x1c8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb feac 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40023c00 	.word	0x40023c00
 80053c0:	40023800 	.word	0x40023800
 80053c4:	0800a594 	.word	0x0800a594
 80053c8:	20000000 	.word	0x20000000
 80053cc:	20000004 	.word	0x20000004

080053d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d4:	b094      	sub	sp, #80	; 0x50
 80053d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	647b      	str	r3, [r7, #68]	; 0x44
 80053dc:	2300      	movs	r3, #0
 80053de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e0:	2300      	movs	r3, #0
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e8:	4b79      	ldr	r3, [pc, #484]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d00d      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x40>
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	f200 80e1 	bhi.w	80055bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_RCC_GetSysClockFreq+0x34>
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d003      	beq.n	800540a <HAL_RCC_GetSysClockFreq+0x3a>
 8005402:	e0db      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005404:	4b73      	ldr	r3, [pc, #460]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005408:	e0db      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800540a:	4b73      	ldr	r3, [pc, #460]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800540e:	e0d8      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005410:	4b6f      	ldr	r3, [pc, #444]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005418:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800541a:	4b6d      	ldr	r3, [pc, #436]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d063      	beq.n	80054ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005426:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	099b      	lsrs	r3, r3, #6
 800542c:	2200      	movs	r2, #0
 800542e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005430:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
 800543a:	2300      	movs	r3, #0
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	f04f 0000 	mov.w	r0, #0
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	0159      	lsls	r1, r3, #5
 8005450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005454:	0150      	lsls	r0, r2, #5
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4621      	mov	r1, r4
 800545c:	1a51      	subs	r1, r2, r1
 800545e:	6139      	str	r1, [r7, #16]
 8005460:	4629      	mov	r1, r5
 8005462:	eb63 0301 	sbc.w	r3, r3, r1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005474:	4659      	mov	r1, fp
 8005476:	018b      	lsls	r3, r1, #6
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800547e:	4651      	mov	r1, sl
 8005480:	018a      	lsls	r2, r1, #6
 8005482:	4651      	mov	r1, sl
 8005484:	ebb2 0801 	subs.w	r8, r2, r1
 8005488:	4659      	mov	r1, fp
 800548a:	eb63 0901 	sbc.w	r9, r3, r1
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800549a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054a2:	4690      	mov	r8, r2
 80054a4:	4699      	mov	r9, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	eb18 0303 	adds.w	r3, r8, r3
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	462b      	mov	r3, r5
 80054b0:	eb49 0303 	adc.w	r3, r9, r3
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054c2:	4629      	mov	r1, r5
 80054c4:	024b      	lsls	r3, r1, #9
 80054c6:	4621      	mov	r1, r4
 80054c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054cc:	4621      	mov	r1, r4
 80054ce:	024a      	lsls	r2, r1, #9
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	2200      	movs	r2, #0
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054e0:	f7fa fece 	bl	8000280 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	e058      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ee:	4b38      	ldr	r3, [pc, #224]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	2200      	movs	r2, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	4611      	mov	r1, r2
 80054fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	2300      	movs	r3, #0
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
 8005504:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	f04f 0000 	mov.w	r0, #0
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	0159      	lsls	r1, r3, #5
 8005516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551a:	0150      	lsls	r0, r2, #5
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4641      	mov	r1, r8
 8005522:	ebb2 0a01 	subs.w	sl, r2, r1
 8005526:	4649      	mov	r1, r9
 8005528:	eb63 0b01 	sbc.w	fp, r3, r1
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005538:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800553c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005540:	ebb2 040a 	subs.w	r4, r2, sl
 8005544:	eb63 050b 	sbc.w	r5, r3, fp
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	00eb      	lsls	r3, r5, #3
 8005552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005556:	00e2      	lsls	r2, r4, #3
 8005558:	4614      	mov	r4, r2
 800555a:	461d      	mov	r5, r3
 800555c:	4643      	mov	r3, r8
 800555e:	18e3      	adds	r3, r4, r3
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	464b      	mov	r3, r9
 8005564:	eb45 0303 	adc.w	r3, r5, r3
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005576:	4629      	mov	r1, r5
 8005578:	028b      	lsls	r3, r1, #10
 800557a:	4621      	mov	r1, r4
 800557c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005580:	4621      	mov	r1, r4
 8005582:	028a      	lsls	r2, r1, #10
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	2200      	movs	r2, #0
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	61fa      	str	r2, [r7, #28]
 8005590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005594:	f7fa fe74 	bl	8000280 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4613      	mov	r3, r2
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80055be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3750      	adds	r7, #80	; 0x50
 80055c8:	46bd      	mov	sp, r7
 80055ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800
 80055d4:	00f42400 	.word	0x00f42400
 80055d8:	007a1200 	.word	0x007a1200

080055dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000000 	.word	0x20000000

080055f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055f8:	f7ff fff0 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 80055fc:	4602      	mov	r2, r0
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	0a9b      	lsrs	r3, r3, #10
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	4903      	ldr	r1, [pc, #12]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40023800 	.word	0x40023800
 8005618:	0800a5a4 	.word	0x0800a5a4

0800561c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005620:	f7ff ffdc 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	0b5b      	lsrs	r3, r3, #13
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40023800 	.word	0x40023800
 8005640:	0800a5a4 	.word	0x0800a5a4

08005644 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d105      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005668:	2b00      	cmp	r3, #0
 800566a:	d035      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800566c:	4b62      	ldr	r3, [pc, #392]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005672:	f7fb fd8d 	bl	8001190 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005678:	e008      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800567a:	f7fb fd89 	bl	8001190 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e0b0      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800568c:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f0      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	019a      	lsls	r2, r3, #6
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	071b      	lsls	r3, r3, #28
 80056a4:	4955      	ldr	r1, [pc, #340]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056ac:	4b52      	ldr	r3, [pc, #328]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b2:	f7fb fd6d 	bl	8001190 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056ba:	f7fb fd69 	bl	8001190 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e090      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056cc:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8083 	beq.w	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4b44      	ldr	r3, [pc, #272]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	4a43      	ldr	r2, [pc, #268]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6413      	str	r3, [r2, #64]	; 0x40
 80056f6:	4b41      	ldr	r3, [pc, #260]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005702:	4b3f      	ldr	r3, [pc, #252]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3e      	ldr	r2, [pc, #248]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800570e:	f7fb fd3f 	bl	8001190 <HAL_GetTick>
 8005712:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005716:	f7fb fd3b 	bl	8001190 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e062      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005728:	4b35      	ldr	r3, [pc, #212]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005734:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02f      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d028      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005752:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575c:	4b29      	ldr	r3, [pc, #164]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005762:	4b28      	ldr	r3, [pc, #160]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005768:	4a24      	ldr	r2, [pc, #144]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800576e:	4b23      	ldr	r3, [pc, #140]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d114      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800577a:	f7fb fd09 	bl	8001190 <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fb fd05 	bl	8001190 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e02a      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ee      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b0:	d10d      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c6:	490d      	ldr	r1, [pc, #52]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]
 80057cc:	e005      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057d8:	6093      	str	r3, [r2, #8]
 80057da:	4b08      	ldr	r3, [pc, #32]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e6:	4905      	ldr	r1, [pc, #20]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	42470068 	.word	0x42470068
 80057fc:	40023800 	.word	0x40023800
 8005800:	40007000 	.word	0x40007000
 8005804:	42470e40 	.word	0x42470e40

08005808 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d13f      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d006      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800583c:	d12f      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800583e:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005840:	617b      	str	r3, [r7, #20]
          break;
 8005842:	e02f      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005844:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005850:	d108      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585a:	4a19      	ldr	r2, [pc, #100]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	e007      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800588a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588e:	0f1b      	lsrs	r3, r3, #28
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	617b      	str	r3, [r7, #20]
          break;
 800589c:	e002      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
          break;
 80058a2:	bf00      	nop
        }
      }
      break;
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80058a6:	bf00      	nop
    }
  }
  return frequency;
 80058a8:	697b      	ldr	r3, [r7, #20]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800
 80058bc:	00bb8000 	.word	0x00bb8000
 80058c0:	007a1200 	.word	0x007a1200
 80058c4:	00f42400 	.word	0x00f42400

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e07b      	b.n	80059d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d009      	beq.n	8005900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
 80058f2:	e005      	b.n	8005900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fb fa9c 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	ea42 0103 	orr.w	r1, r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	f003 0104 	and.w	r1, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f003 0210 	and.w	r2, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e042      	b.n	8005a72 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fb fa71 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2224      	movs	r2, #36	; 0x24
 8005a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f972 	bl	8005d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b08a      	sub	sp, #40	; 0x28
 8005a7e:	af02      	add	r7, sp, #8
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	4613      	mov	r3, r2
 8005a88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d175      	bne.n	8005b86 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_UART_Transmit+0x2c>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e06e      	b.n	8005b88 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2221      	movs	r2, #33	; 0x21
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab8:	f7fb fb6a 	bl	8001190 <HAL_GetTick>
 8005abc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d108      	bne.n	8005ae6 <HAL_UART_Transmit+0x6c>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e003      	b.n	8005aee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aee:	e02e      	b.n	8005b4e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2200      	movs	r2, #0
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f848 	bl	8005b90 <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e03a      	b.n	8005b88 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e007      	b.n	8005b40 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1cb      	bne.n	8005af0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2140      	movs	r1, #64	; 0x40
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f814 	bl	8005b90 <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e006      	b.n	8005b88 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e000      	b.n	8005b88 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
  }
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba0:	e03b      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d037      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005baa:	f7fb faf1 	bl	8001190 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d302      	bcc.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e03a      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d023      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d020      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d01d      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d116      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f81d 	bl	8005c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e00f      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d0b4      	beq.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b095      	sub	sp, #84	; 0x54
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c6a:	643a      	str	r2, [r7, #64]	; 0x40
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e5      	bne.n	8005c7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d119      	bne.n	8005cee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f023 0310 	bic.w	r3, r3, #16
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cda:	61ba      	str	r2, [r7, #24]
 8005cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cfc:	bf00      	nop
 8005cfe:	3754      	adds	r7, #84	; 0x54
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d0c:	b0c0      	sub	sp, #256	; 0x100
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	68d9      	ldr	r1, [r3, #12]
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	ea40 0301 	orr.w	r3, r0, r1
 8005d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d60:	f021 010c 	bic.w	r1, r1, #12
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d82:	6999      	ldr	r1, [r3, #24]
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	ea40 0301 	orr.w	r3, r0, r1
 8005d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b8f      	ldr	r3, [pc, #572]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d005      	beq.n	8005da8 <UART_SetConfig+0xa0>
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b8d      	ldr	r3, [pc, #564]	; (8005fd8 <UART_SetConfig+0x2d0>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d104      	bne.n	8005db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da8:	f7ff fc38 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 8005dac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005db0:	e003      	b.n	8005dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005db2:	f7ff fc1f 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8005db6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc4:	f040 810c 	bne.w	8005fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dda:	4622      	mov	r2, r4
 8005ddc:	462b      	mov	r3, r5
 8005dde:	1891      	adds	r1, r2, r2
 8005de0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005de2:	415b      	adcs	r3, r3
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dea:	4621      	mov	r1, r4
 8005dec:	eb12 0801 	adds.w	r8, r2, r1
 8005df0:	4629      	mov	r1, r5
 8005df2:	eb43 0901 	adc.w	r9, r3, r1
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e0a:	4690      	mov	r8, r2
 8005e0c:	4699      	mov	r9, r3
 8005e0e:	4623      	mov	r3, r4
 8005e10:	eb18 0303 	adds.w	r3, r8, r3
 8005e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e18:	462b      	mov	r3, r5
 8005e1a:	eb49 0303 	adc.w	r3, r9, r3
 8005e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e36:	460b      	mov	r3, r1
 8005e38:	18db      	adds	r3, r3, r3
 8005e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	eb42 0303 	adc.w	r3, r2, r3
 8005e42:	657b      	str	r3, [r7, #84]	; 0x54
 8005e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e4c:	f7fa fa18 	bl	8000280 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005e56:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	011c      	lsls	r4, r3, #4
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	1891      	adds	r1, r2, r2
 8005e76:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e80:	4641      	mov	r1, r8
 8005e82:	eb12 0a01 	adds.w	sl, r2, r1
 8005e86:	4649      	mov	r1, r9
 8005e88:	eb43 0b01 	adc.w	fp, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea0:	4692      	mov	sl, r2
 8005ea2:	469b      	mov	fp, r3
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8005eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	18db      	adds	r3, r3, r3
 8005ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	eb42 0303 	adc.w	r3, r2, r3
 8005ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ee2:	f7fa f9cd 	bl	8000280 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	4b3b      	ldr	r3, [pc, #236]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005eee:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	2264      	movs	r2, #100	; 0x64
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	1acb      	subs	r3, r1, r3
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f02:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005f04:	fba3 2302 	umull	r2, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f10:	441c      	add	r4, r3
 8005f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	1891      	adds	r1, r2, r2
 8005f2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f2c:	415b      	adcs	r3, r3
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f34:	4641      	mov	r1, r8
 8005f36:	1851      	adds	r1, r2, r1
 8005f38:	6339      	str	r1, [r7, #48]	; 0x30
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	414b      	adcs	r3, r1
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	00cb      	lsls	r3, r1, #3
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f56:	4651      	mov	r1, sl
 8005f58:	00ca      	lsls	r2, r1, #3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4642      	mov	r2, r8
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f68:	464b      	mov	r3, r9
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	eb42 0303 	adc.w	r3, r2, r3
 8005f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f88:	460b      	mov	r3, r1
 8005f8a:	18db      	adds	r3, r3, r3
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8e:	4613      	mov	r3, r2
 8005f90:	eb42 0303 	adc.w	r3, r2, r3
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f9e:	f7fa f96f 	bl	8000280 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	f003 0207 	and.w	r2, r3, #7
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4422      	add	r2, r4
 8005fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fd0:	e106      	b.n	80061e0 <UART_SetConfig+0x4d8>
 8005fd2:	bf00      	nop
 8005fd4:	40011000 	.word	0x40011000
 8005fd8:	40011400 	.word	0x40011400
 8005fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	1891      	adds	r1, r2, r2
 8005ff8:	6239      	str	r1, [r7, #32]
 8005ffa:	415b      	adcs	r3, r3
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006002:	4641      	mov	r1, r8
 8006004:	1854      	adds	r4, r2, r1
 8006006:	4649      	mov	r1, r9
 8006008:	eb43 0501 	adc.w	r5, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	00eb      	lsls	r3, r5, #3
 8006016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800601a:	00e2      	lsls	r2, r4, #3
 800601c:	4614      	mov	r4, r2
 800601e:	461d      	mov	r5, r3
 8006020:	4643      	mov	r3, r8
 8006022:	18e3      	adds	r3, r4, r3
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006028:	464b      	mov	r3, r9
 800602a:	eb45 0303 	adc.w	r3, r5, r3
 800602e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800603e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800604e:	4629      	mov	r1, r5
 8006050:	008b      	lsls	r3, r1, #2
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006058:	4621      	mov	r1, r4
 800605a:	008a      	lsls	r2, r1, #2
 800605c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006060:	f7fa f90e 	bl	8000280 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b60      	ldr	r3, [pc, #384]	; (80061ec <UART_SetConfig+0x4e4>)
 800606a:	fba3 2302 	umull	r2, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	011c      	lsls	r4, r3, #4
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006076:	2200      	movs	r2, #0
 8006078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800607c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	1891      	adds	r1, r2, r2
 800608a:	61b9      	str	r1, [r7, #24]
 800608c:	415b      	adcs	r3, r3
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006094:	4641      	mov	r1, r8
 8006096:	1851      	adds	r1, r2, r1
 8006098:	6139      	str	r1, [r7, #16]
 800609a:	4649      	mov	r1, r9
 800609c:	414b      	adcs	r3, r1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060ac:	4659      	mov	r1, fp
 80060ae:	00cb      	lsls	r3, r1, #3
 80060b0:	4651      	mov	r1, sl
 80060b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b6:	4651      	mov	r1, sl
 80060b8:	00ca      	lsls	r2, r1, #3
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	4642      	mov	r2, r8
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060c8:	464b      	mov	r3, r9
 80060ca:	460a      	mov	r2, r1
 80060cc:	eb42 0303 	adc.w	r3, r2, r3
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80060de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060ec:	4649      	mov	r1, r9
 80060ee:	008b      	lsls	r3, r1, #2
 80060f0:	4641      	mov	r1, r8
 80060f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f6:	4641      	mov	r1, r8
 80060f8:	008a      	lsls	r2, r1, #2
 80060fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060fe:	f7fa f8bf 	bl	8000280 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4611      	mov	r1, r2
 8006108:	4b38      	ldr	r3, [pc, #224]	; (80061ec <UART_SetConfig+0x4e4>)
 800610a:	fba3 2301 	umull	r2, r3, r3, r1
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2264      	movs	r2, #100	; 0x64
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	1acb      	subs	r3, r1, r3
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	3332      	adds	r3, #50	; 0x32
 800611c:	4a33      	ldr	r2, [pc, #204]	; (80061ec <UART_SetConfig+0x4e4>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006128:	441c      	add	r4, r3
 800612a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612e:	2200      	movs	r2, #0
 8006130:	673b      	str	r3, [r7, #112]	; 0x70
 8006132:	677a      	str	r2, [r7, #116]	; 0x74
 8006134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	1891      	adds	r1, r2, r2
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	415b      	adcs	r3, r3
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006148:	4641      	mov	r1, r8
 800614a:	1851      	adds	r1, r2, r1
 800614c:	6039      	str	r1, [r7, #0]
 800614e:	4649      	mov	r1, r9
 8006150:	414b      	adcs	r3, r1
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006160:	4659      	mov	r1, fp
 8006162:	00cb      	lsls	r3, r1, #3
 8006164:	4651      	mov	r1, sl
 8006166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800616a:	4651      	mov	r1, sl
 800616c:	00ca      	lsls	r2, r1, #3
 800616e:	4610      	mov	r0, r2
 8006170:	4619      	mov	r1, r3
 8006172:	4603      	mov	r3, r0
 8006174:	4642      	mov	r2, r8
 8006176:	189b      	adds	r3, r3, r2
 8006178:	66bb      	str	r3, [r7, #104]	; 0x68
 800617a:	464b      	mov	r3, r9
 800617c:	460a      	mov	r2, r1
 800617e:	eb42 0303 	adc.w	r3, r2, r3
 8006182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	663b      	str	r3, [r7, #96]	; 0x60
 800618e:	667a      	str	r2, [r7, #100]	; 0x64
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800619c:	4649      	mov	r1, r9
 800619e:	008b      	lsls	r3, r1, #2
 80061a0:	4641      	mov	r1, r8
 80061a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a6:	4641      	mov	r1, r8
 80061a8:	008a      	lsls	r2, r1, #2
 80061aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061ae:	f7fa f867 	bl	8000280 <__aeabi_uldivmod>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <UART_SetConfig+0x4e4>)
 80061b8:	fba3 1302 	umull	r1, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	2164      	movs	r1, #100	; 0x64
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	3332      	adds	r3, #50	; 0x32
 80061ca:	4a08      	ldr	r2, [pc, #32]	; (80061ec <UART_SetConfig+0x4e4>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4422      	add	r2, r4
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061e6:	46bd      	mov	sp, r7
 80061e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ec:	51eb851f 	.word	0x51eb851f

080061f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061f0:	b084      	sub	sp, #16
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	f107 001c 	add.w	r0, r7, #28
 80061fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006202:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006206:	2b01      	cmp	r3, #1
 8006208:	d123      	bne.n	8006252 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800621e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006236:	2b01      	cmp	r3, #1
 8006238:	d105      	bne.n	8006246 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9dc 	bl	8006604 <USB_CoreReset>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
 8006250:	e01b      	b.n	800628a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9d0 	bl	8006604 <USB_CoreReset>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006268:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
 800627c:	e005      	b.n	800628a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800628a:	7fbb      	ldrb	r3, [r7, #30]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10b      	bne.n	80062a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f043 0206 	orr.w	r2, r3, #6
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f043 0220 	orr.w	r2, r3, #32
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062b4:	b004      	add	sp, #16
 80062b6:	4770      	bx	lr

080062b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d115      	bne.n	800634a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800632a:	200a      	movs	r0, #10
 800632c:	f7fa ff3c 	bl	80011a8 <HAL_Delay>
      ms += 10U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	330a      	adds	r3, #10
 8006334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f956 	bl	80065e8 <USB_GetMode>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d01e      	beq.n	8006380 <USB_SetCurrentMode+0x84>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2bc7      	cmp	r3, #199	; 0xc7
 8006346:	d9f0      	bls.n	800632a <USB_SetCurrentMode+0x2e>
 8006348:	e01a      	b.n	8006380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d115      	bne.n	800637c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800635c:	200a      	movs	r0, #10
 800635e:	f7fa ff23 	bl	80011a8 <HAL_Delay>
      ms += 10U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	330a      	adds	r3, #10
 8006366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f93d 	bl	80065e8 <USB_GetMode>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <USB_SetCurrentMode+0x84>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2bc7      	cmp	r3, #199	; 0xc7
 8006378:	d9f0      	bls.n	800635c <USB_SetCurrentMode+0x60>
 800637a:	e001      	b.n	8006380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e005      	b.n	800638c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2bc8      	cmp	r3, #200	; 0xc8
 8006384:	d101      	bne.n	800638a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80063ae:	d901      	bls.n	80063b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e01b      	b.n	80063ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	daf2      	bge.n	80063a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	019b      	lsls	r3, r3, #6
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80063d8:	d901      	bls.n	80063de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e006      	b.n	80063ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d0f0      	beq.n	80063cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006410:	d901      	bls.n	8006416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e018      	b.n	8006448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	daf2      	bge.n	8006404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2210      	movs	r2, #16
 8006426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006434:	d901      	bls.n	800643a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e006      	b.n	8006448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d0f0      	beq.n	8006428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006454:	b480      	push	{r7}
 8006456:	b089      	sub	sp, #36	; 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	460b      	mov	r3, r1
 8006464:	71fb      	strb	r3, [r7, #7]
 8006466:	4613      	mov	r3, r2
 8006468:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006472:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d123      	bne.n	80064c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800647a:	88bb      	ldrh	r3, [r7, #4]
 800647c:	3303      	adds	r3, #3
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006482:	2300      	movs	r3, #0
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e018      	b.n	80064ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	031a      	lsls	r2, r3, #12
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4413      	add	r3, r2
 8006490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006494:	461a      	mov	r2, r3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	3301      	adds	r3, #1
 80064a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3301      	adds	r3, #1
 80064b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	3301      	adds	r3, #1
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d3e2      	bcc.n	8006488 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3724      	adds	r7, #36	; 0x24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b08b      	sub	sp, #44	; 0x2c
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	089b      	lsrs	r3, r3, #2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	623b      	str	r3, [r7, #32]
 80064fa:	e014      	b.n	8006526 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	601a      	str	r2, [r3, #0]
    pDest++;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	3301      	adds	r3, #1
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	3301      	adds	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	3301      	adds	r3, #1
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	3301      	adds	r3, #1
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	429a      	cmp	r2, r3
 800652c:	d3e6      	bcc.n	80064fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800652e:	8bfb      	ldrh	r3, [r7, #30]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01e      	beq.n	8006572 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653e:	461a      	mov	r2, r3
 8006540:	f107 0310 	add.w	r3, r7, #16
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	701a      	strb	r2, [r3, #0]
      i++;
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	3301      	adds	r3, #1
 800655e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	3301      	adds	r3, #1
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006566:	8bfb      	ldrh	r3, [r7, #30]
 8006568:	3b01      	subs	r3, #1
 800656a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800656c:	8bfb      	ldrh	r3, [r7, #30]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ea      	bne.n	8006548 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006574:	4618      	mov	r0, r3
 8006576:	372c      	adds	r7, #44	; 0x2c
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4013      	ands	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006598:	68fb      	ldr	r3, [r7, #12]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065da:	68bb      	ldr	r3, [r7, #8]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0301 	and.w	r3, r3, #1
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800661c:	d901      	bls.n	8006622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e01b      	b.n	800665a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	daf2      	bge.n	8006610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f043 0201 	orr.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006646:	d901      	bls.n	800664c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e006      	b.n	800665a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d0f0      	beq.n	800663a <USB_CoreReset+0x36>

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006668:	b084      	sub	sp, #16
 800666a:	b580      	push	{r7, lr}
 800666c:	b086      	sub	sp, #24
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006688:	461a      	mov	r2, r3
 800668a:	2300      	movs	r3, #0
 800668c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d119      	bne.n	80066f2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80066be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10a      	bne.n	80066dc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d4:	f043 0304 	orr.w	r3, r3, #4
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e014      	b.n	8006706 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ea:	f023 0304 	bic.w	r3, r3, #4
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	e009      	b.n	8006706 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006700:	f023 0304 	bic.w	r3, r3, #4
 8006704:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006706:	2110      	movs	r1, #16
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff fe43 	bl	8006394 <USB_FlushTxFifo>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fe6d 	bl	80063f8 <USB_FlushRxFifo>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	e015      	b.n	800675a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	461a      	mov	r2, r3
 800673c:	f04f 33ff 	mov.w	r3, #4294967295
 8006740:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674e:	461a      	mov	r2, r3
 8006750:	2300      	movs	r3, #0
 8006752:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	3301      	adds	r3, #1
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800675e:	461a      	mov	r2, r3
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4293      	cmp	r3, r2
 8006764:	d3e3      	bcc.n	800672e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <USB_HostInit+0x170>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d10b      	bne.n	8006794 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a15      	ldr	r2, [pc, #84]	; (80067dc <USB_HostInit+0x174>)
 8006788:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a14      	ldr	r2, [pc, #80]	; (80067e0 <USB_HostInit+0x178>)
 800678e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006792:	e009      	b.n	80067a8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <USB_HostInit+0x17c>)
 800679e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <USB_HostInit+0x180>)
 80067a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d105      	bne.n	80067bc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f043 0210 	orr.w	r2, r3, #16
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <USB_HostInit+0x184>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d4:	b004      	add	sp, #16
 80067d6:	4770      	bx	lr
 80067d8:	40040000 	.word	0x40040000
 80067dc:	01000200 	.word	0x01000200
 80067e0:	00e00300 	.word	0x00e00300
 80067e4:	00600080 	.word	0x00600080
 80067e8:	004000e0 	.word	0x004000e0
 80067ec:	a3200008 	.word	0xa3200008

080067f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006828:	4313      	orrs	r3, r2
 800682a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d107      	bne.n	8006842 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006838:	461a      	mov	r2, r3
 800683a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800683e:	6053      	str	r3, [r2, #4]
 8006840:	e00c      	b.n	800685c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d107      	bne.n	8006858 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	461a      	mov	r2, r3
 8006850:	f241 7370 	movw	r3, #6000	; 0x1770
 8006854:	6053      	str	r3, [r2, #4]
 8006856:	e001      	b.n	800685c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800688a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800689a:	2064      	movs	r0, #100	; 0x64
 800689c:	f7fa fc84 	bl	80011a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80068ae:	200a      	movs	r0, #10
 80068b0:	f7fa fc7a 	bl	80011a8 <HAL_Delay>

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <USB_DriveVbus+0x44>
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006900:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690c:	d109      	bne.n	8006922 <USB_DriveVbus+0x64>
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800691c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006920:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	0c5b      	lsrs	r3, r3, #17
 800694e:	f003 0303 	and.w	r3, r3, #3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	b29b      	uxth	r3, r3
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	461a      	mov	r2, r3
 800698e:	4603      	mov	r3, r0
 8006990:	70fb      	strb	r3, [r7, #3]
 8006992:	460b      	mov	r3, r1
 8006994:	70bb      	strb	r3, [r7, #2]
 8006996:	4613      	mov	r3, r2
 8006998:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ae:	461a      	mov	r2, r3
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
 80069b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80069b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d87c      	bhi.n	8006ab8 <USB_HC_Init+0x138>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USB_HC_Init+0x44>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	08006a7b 	.word	0x08006a7b
 80069cc:	080069d5 	.word	0x080069d5
 80069d0:	08006a3d 	.word	0x08006a3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e0:	461a      	mov	r2, r3
 80069e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80069e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80069e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da10      	bge.n	8006a12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	78fa      	ldrb	r2, [r7, #3]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006a10:	e055      	b.n	8006abe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a6f      	ldr	r2, [pc, #444]	; (8006bd4 <USB_HC_Init+0x254>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d151      	bne.n	8006abe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	78fa      	ldrb	r2, [r7, #3]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a38:	60d3      	str	r3, [r2, #12]
      break;
 8006a3a:	e040      	b.n	8006abe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006a4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da34      	bge.n	8006ac2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a78:	e023      	b.n	8006ac2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	461a      	mov	r2, r3
 8006a88:	f240 2325 	movw	r3, #549	; 0x225
 8006a8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da17      	bge.n	8006ac6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ab4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ab6:	e006      	b.n	8006ac6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77fb      	strb	r3, [r7, #31]
      break;
 8006abc:	e004      	b.n	8006ac8 <USB_HC_Init+0x148>
      break;
 8006abe:	bf00      	nop
 8006ac0:	e002      	b.n	8006ac8 <USB_HC_Init+0x148>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e000      	b.n	8006ac8 <USB_HC_Init+0x148>
      break;
 8006ac6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	6939      	ldr	r1, [r7, #16]
 8006b10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b14:	4313      	orrs	r3, r2
 8006b16:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da03      	bge.n	8006b34 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e001      	b.n	8006b38 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff fef9 	bl	8006930 <USB_GetHostSpeed>
 8006b3e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006b40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d106      	bne.n	8006b56 <USB_HC_Init+0x1d6>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d003      	beq.n	8006b56 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e001      	b.n	8006b5a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b5a:	787b      	ldrb	r3, [r7, #1]
 8006b5c:	059b      	lsls	r3, r3, #22
 8006b5e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b62:	78bb      	ldrb	r3, [r7, #2]
 8006b64:	02db      	lsls	r3, r3, #11
 8006b66:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b6a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b70:	049b      	lsls	r3, r3, #18
 8006b72:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b76:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006b78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b7e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b88:	78fa      	ldrb	r2, [r7, #3]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b98:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d003      	beq.n	8006baa <USB_HC_Init+0x22a>
 8006ba2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10f      	bne.n	8006bca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bc8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006bca:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40040000 	.word	0x40040000

08006bd8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08c      	sub	sp, #48	; 0x30
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bf4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a5d      	ldr	r2, [pc, #372]	; (8006d70 <USB_HC_StartXfer+0x198>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d12f      	bne.n	8006c5e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d11c      	bne.n	8006c3e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	7c9b      	ldrb	r3, [r3, #18]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <USB_HC_StartXfer+0x3c>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	7c9b      	ldrb	r3, [r3, #18]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d124      	bne.n	8006c5e <USB_HC_StartXfer+0x86>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	799b      	ldrb	r3, [r3, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d120      	bne.n	8006c5e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	60d3      	str	r3, [r2, #12]
 8006c3c:	e00f      	b.n	8006c5e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	791b      	ldrb	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <USB_HC_StartXfer+0x86>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	795b      	ldrb	r3, [r3, #5]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d107      	bne.n	8006c5e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fb6b 	bl	8007330 <USB_DoPing>
        return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e232      	b.n	80070c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	799b      	ldrb	r3, [r3, #6]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d158      	bne.n	8006d18 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006c66:	2301      	movs	r3, #1
 8006c68:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	78db      	ldrb	r3, [r3, #3]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	8a92      	ldrh	r2, [r2, #20]
 8006c78:	fb03 f202 	mul.w	r2, r3, r2
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61da      	str	r2, [r3, #28]
 8006c80:	e07c      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	7c9b      	ldrb	r3, [r3, #18]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d130      	bne.n	8006cec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	2bbc      	cmp	r3, #188	; 0xbc
 8006c90:	d918      	bls.n	8006cc4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	8a9b      	ldrh	r3, [r3, #20]
 8006c96:	461a      	mov	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d003      	beq.n	8006cb4 <USB_HC_StartXfer+0xdc>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d103      	bne.n	8006cbc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	e05f      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	e05b      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d007      	beq.n	8006ce4 <USB_HC_StartXfer+0x10c>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d003      	beq.n	8006ce4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	e04b      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	60da      	str	r2, [r3, #12]
 8006cea:	e047      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d10d      	bne.n	8006d0e <USB_HC_StartXfer+0x136>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	8a92      	ldrh	r2, [r2, #20]
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d907      	bls.n	8006d0e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	8a92      	ldrh	r2, [r2, #20]
 8006d04:	fb03 f202 	mul.w	r2, r3, r2
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	61da      	str	r2, [r3, #28]
 8006d0c:	e036      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6a1a      	ldr	r2, [r3, #32]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	61da      	str	r2, [r3, #28]
 8006d16:	e031      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d018      	beq.n	8006d52 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	8a92      	ldrh	r2, [r2, #20]
 8006d28:	4413      	add	r3, r2
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	8a92      	ldrh	r2, [r2, #20]
 8006d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d34:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006d36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d38:	8b7b      	ldrh	r3, [r7, #26]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d90b      	bls.n	8006d56 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006d3e:	8b7b      	ldrh	r3, [r7, #26]
 8006d40:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	8a92      	ldrh	r2, [r2, #20]
 8006d48:	fb03 f202 	mul.w	r2, r3, r2
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61da      	str	r2, [r3, #28]
 8006d50:	e001      	b.n	8006d56 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006d52:	2301      	movs	r3, #1
 8006d54:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	8a92      	ldrh	r2, [r2, #20]
 8006d64:	fb03 f202 	mul.w	r2, r3, r2
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	61da      	str	r2, [r3, #28]
 8006d6c:	e006      	b.n	8006d7c <USB_HC_StartXfer+0x1a4>
 8006d6e:	bf00      	nop
 8006d70:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d86:	04d9      	lsls	r1, r3, #19
 8006d88:	4ba3      	ldr	r3, [pc, #652]	; (8007018 <USB_HC_StartXfer+0x440>)
 8006d8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	7d9b      	ldrb	r3, [r3, #22]
 8006d92:	075b      	lsls	r3, r3, #29
 8006d94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d98:	69f9      	ldr	r1, [r7, #28]
 8006d9a:	0148      	lsls	r0, r1, #5
 8006d9c:	6a39      	ldr	r1, [r7, #32]
 8006d9e:	4401      	add	r1, r0
 8006da0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006da4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006da6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006df8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	7e7b      	ldrb	r3, [r7, #25]
 8006e0a:	075b      	lsls	r3, r3, #29
 8006e0c:	69f9      	ldr	r1, [r7, #28]
 8006e0e:	0148      	lsls	r0, r1, #5
 8006e10:	6a39      	ldr	r1, [r7, #32]
 8006e12:	4401      	add	r1, r0
 8006e14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	799b      	ldrb	r3, [r3, #6]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	f040 80c3 	bne.w	8006fac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	7c5b      	ldrb	r3, [r3, #17]
 8006e2a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006e30:	4313      	orrs	r3, r2
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006e42:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	79db      	ldrb	r3, [r3, #7]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d123      	bne.n	8006eb4 <USB_HC_StartXfer+0x2dc>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	78db      	ldrb	r3, [r3, #3]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11f      	bne.n	8006eb4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e92:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	7c9b      	ldrb	r3, [r3, #18]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d003      	beq.n	8006ec4 <USB_HC_StartXfer+0x2ec>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	7c9b      	ldrb	r3, [r3, #18]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d117      	bne.n	8006ef4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d113      	bne.n	8006ef4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	78db      	ldrb	r3, [r3, #3]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d10f      	bne.n	8006ef4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	6a3a      	ldr	r2, [r7, #32]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	7c9b      	ldrb	r3, [r3, #18]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d162      	bne.n	8006fc2 <USB_HC_StartXfer+0x3ea>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	78db      	ldrb	r3, [r3, #3]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d15e      	bne.n	8006fc2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d858      	bhi.n	8006fc0 <USB_HC_StartXfer+0x3e8>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USB_HC_StartXfer+0x33c>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f47 	.word	0x08006f47
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f8b 	.word	0x08006f8b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	6053      	str	r3, [r2, #4]
          break;
 8006f44:	e03d      	b.n	8006fc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f60:	f043 030e 	orr.w	r3, r3, #14
 8006f64:	6053      	str	r3, [r2, #4]
          break;
 8006f66:	e02c      	b.n	8006fc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f86:	6053      	str	r3, [r2, #4]
          break;
 8006f88:	e01b      	b.n	8006fc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fa8:	6053      	str	r3, [r2, #4]
          break;
 8006faa:	e00a      	b.n	8006fc2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6053      	str	r3, [r2, #4]
 8006fbe:	e000      	b.n	8006fc2 <USB_HC_StartXfer+0x3ea>
          break;
 8006fc0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fd8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	e003      	b.n	8006ff4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ff2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ffa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	4413      	add	r3, r2
 8007004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007008:	461a      	mov	r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e055      	b.n	80070c4 <USB_HC_StartXfer+0x4ec>
 8007018:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	78db      	ldrb	r3, [r3, #3]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d14e      	bne.n	80070c2 <USB_HC_StartXfer+0x4ea>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d04a      	beq.n	80070c2 <USB_HC_StartXfer+0x4ea>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	79db      	ldrb	r3, [r3, #7]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d146      	bne.n	80070c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	7c9b      	ldrb	r3, [r3, #18]
 8007038:	2b03      	cmp	r3, #3
 800703a:	d831      	bhi.n	80070a0 <USB_HC_StartXfer+0x4c8>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USB_HC_StartXfer+0x46c>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007055 	.word	0x08007055
 8007048:	08007079 	.word	0x08007079
 800704c:	08007055 	.word	0x08007055
 8007050:	08007079 	.word	0x08007079
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	3303      	adds	r3, #3
 800705a:	089b      	lsrs	r3, r3, #2
 800705c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800705e:	8afa      	ldrh	r2, [r7, #22]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	b29b      	uxth	r3, r3
 8007066:	429a      	cmp	r2, r3
 8007068:	d91c      	bls.n	80070a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f043 0220 	orr.w	r2, r3, #32
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	619a      	str	r2, [r3, #24]
        }
        break;
 8007076:	e015      	b.n	80070a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	3303      	adds	r3, #3
 800707e:	089b      	lsrs	r3, r3, #2
 8007080:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007082:	8afa      	ldrh	r2, [r7, #22]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	b29b      	uxth	r3, r3
 800708e:	429a      	cmp	r2, r3
 8007090:	d90a      	bls.n	80070a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	619a      	str	r2, [r3, #24]
        }
        break;
 800709e:	e003      	b.n	80070a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <USB_HC_StartXfer+0x4d2>
        break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <USB_HC_StartXfer+0x4d2>
        break;
 80070a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6999      	ldr	r1, [r3, #24]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	785a      	ldrb	r2, [r3, #1]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2000      	movs	r0, #0
 80070ba:	9000      	str	r0, [sp, #0]
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff f9c9 	bl	8006454 <USB_WritePacket>
  }

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3728      	adds	r7, #40	; 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	b29b      	uxth	r3, r3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b089      	sub	sp, #36	; 0x24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	0c9b      	lsrs	r3, r3, #18
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	0fdb      	lsrs	r3, r3, #31
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	0fdb      	lsrs	r3, r3, #31
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b20      	cmp	r3, #32
 8007152:	d10d      	bne.n	8007170 <USB_HC_Halt+0x82>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <USB_HC_Halt+0x82>
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d002      	beq.n	800716c <USB_HC_Halt+0x7e>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d101      	bne.n	8007170 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e0d8      	b.n	8007322 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <USB_HC_Halt+0x8e>
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d173      	bne.n	8007264 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	440a      	add	r2, r1
 8007192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800719a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d14a      	bne.n	800723e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d133      	bne.n	800721c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007200:	d82e      	bhi.n	8007260 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007218:	d0ec      	beq.n	80071f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800721a:	e081      	b.n	8007320 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	440a      	add	r2, r1
 8007232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800723a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800723c:	e070      	b.n	8007320 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	69fa      	ldr	r2, [r7, #28]
 8007252:	440a      	add	r2, r1
 8007254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800725c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800725e:	e05f      	b.n	8007320 <USB_HC_Halt+0x232>
            break;
 8007260:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007262:	e05d      	b.n	8007320 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	4413      	add	r3, r2
 800726c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	440a      	add	r2, r1
 800727a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800727e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007282:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d133      	bne.n	80072fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072e0:	d81d      	bhi.n	800731e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f8:	d0ec      	beq.n	80072d4 <USB_HC_Halt+0x1e6>
 80072fa:	e011      	b.n	8007320 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	440a      	add	r2, r1
 8007312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e000      	b.n	8007320 <USB_HC_Halt+0x232>
          break;
 800731e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007344:	2301      	movs	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	04da      	lsls	r2, r3, #19
 800734c:	4b15      	ldr	r3, [pc, #84]	; (80073a4 <USB_DoPing+0x74>)
 800734e:	4013      	ands	r3, r2
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	440a      	add	r2, r1
 8007358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800735c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007360:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007378:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007380:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	1ff80000 	.word	0x1ff80000

080073a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7fe ff8c 	bl	80062da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073c2:	2110      	movs	r1, #16
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fe ffe5 	bl	8006394 <USB_FlushTxFifo>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff f80f 	bl	80063f8 <USB_FlushRxFifo>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	e01f      	b.n	800742a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007400:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007408:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007410:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741e:	461a      	mov	r2, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	3301      	adds	r3, #1
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b0f      	cmp	r3, #15
 800742e:	d9dc      	bls.n	80073ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	e034      	b.n	80074a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800744c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007454:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800745c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	461a      	mov	r2, r3
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800747c:	d80c      	bhi.n	8007498 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007494:	d0ec      	beq.n	8007470 <USB_StopHost+0xc8>
 8007496:	e000      	b.n	800749a <USB_StopHost+0xf2>
        break;
 8007498:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3301      	adds	r3, #1
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b0f      	cmp	r3, #15
 80074a4:	d9c7      	bls.n	8007436 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ac:	461a      	mov	r2, r3
 80074ae:	f04f 33ff 	mov.w	r3, #4294967295
 80074b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fe fefb 	bl	80062b8 <USB_EnableGlobalInt>

  return ret;
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b089      	sub	sp, #36	; 0x24
 80074d0:	af04      	add	r7, sp, #16
 80074d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074d4:	2301      	movs	r3, #1
 80074d6:	2202      	movs	r2, #2
 80074d8:	2102      	movs	r1, #2
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fc85 	bl	8007dea <USBH_FindInterface>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2bff      	cmp	r3, #255	; 0xff
 80074e8:	d002      	beq.n	80074f0 <USBH_CDC_InterfaceInit+0x24>
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d901      	bls.n	80074f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	e13d      	b.n	8007770 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc5a 	bl	8007db2 <USBH_SelectInterface>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007508:	2302      	movs	r3, #2
 800750a:	e131      	b.n	8007770 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007512:	2050      	movs	r0, #80	; 0x50
 8007514:	f002 fb74 	bl	8009c00 <malloc>
 8007518:	4603      	mov	r3, r0
 800751a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800752c:	2302      	movs	r3, #2
 800752e:	e11f      	b.n	8007770 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007530:	2250      	movs	r2, #80	; 0x50
 8007532:	2100      	movs	r1, #0
 8007534:	68b8      	ldr	r0, [r7, #8]
 8007536:	f002 fc3f 	bl	8009db8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	211a      	movs	r1, #26
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	4413      	add	r3, r2
 8007546:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b25b      	sxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	da15      	bge.n	800757e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	211a      	movs	r1, #26
 8007558:	fb01 f303 	mul.w	r3, r1, r3
 800755c:	4413      	add	r3, r2
 800755e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	211a      	movs	r1, #26
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	4413      	add	r3, r2
 8007574:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 ffce 	bl	8009526 <USBH_AllocPipe>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	7819      	ldrb	r1, [r3, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7858      	ldrb	r0, [r3, #1]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	8952      	ldrh	r2, [r2, #10]
 80075aa:	9202      	str	r2, [sp, #8]
 80075ac:	2203      	movs	r2, #3
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	4623      	mov	r3, r4
 80075b4:	4602      	mov	r2, r0
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 ff86 	bl	80094c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2200      	movs	r2, #0
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f002 fa95 	bl	8009af4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075ca:	2300      	movs	r3, #0
 80075cc:	2200      	movs	r2, #0
 80075ce:	210a      	movs	r1, #10
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc0a 	bl	8007dea <USBH_FindInterface>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	2bff      	cmp	r3, #255	; 0xff
 80075de:	d002      	beq.n	80075e6 <USBH_CDC_InterfaceInit+0x11a>
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d901      	bls.n	80075ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075e6:	2302      	movs	r3, #2
 80075e8:	e0c2      	b.n	8007770 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	211a      	movs	r1, #26
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b25b      	sxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da16      	bge.n	8007630 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	211a      	movs	r1, #26
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	4413      	add	r3, r2
 800760e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	211a      	movs	r1, #26
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	4413      	add	r3, r2
 8007624:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007628:	881a      	ldrh	r2, [r3, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	835a      	strh	r2, [r3, #26]
 800762e:	e015      	b.n	800765c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	211a      	movs	r1, #26
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	4413      	add	r3, r2
 800763c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	211a      	movs	r1, #26
 800764c:	fb01 f303 	mul.w	r3, r1, r3
 8007650:	4413      	add	r3, r2
 8007652:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007656:	881a      	ldrh	r2, [r3, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	211a      	movs	r1, #26
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	4413      	add	r3, r2
 8007668:	f203 3356 	addw	r3, r3, #854	; 0x356
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b25b      	sxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	da16      	bge.n	80076a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	211a      	movs	r1, #26
 800767a:	fb01 f303 	mul.w	r3, r1, r3
 800767e:	4413      	add	r3, r2
 8007680:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	211a      	movs	r1, #26
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	4413      	add	r3, r2
 8007696:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	835a      	strh	r2, [r3, #26]
 80076a0:	e015      	b.n	80076ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	211a      	movs	r1, #26
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	211a      	movs	r1, #26
 80076be:	fb01 f303 	mul.w	r3, r1, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076c8:	881a      	ldrh	r2, [r3, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	7b9b      	ldrb	r3, [r3, #14]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 ff26 	bl	8009526 <USBH_AllocPipe>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	7bdb      	ldrb	r3, [r3, #15]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 ff1c 	bl	8009526 <USBH_AllocPipe>
 80076ee:	4603      	mov	r3, r0
 80076f0:	461a      	mov	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	7b59      	ldrb	r1, [r3, #13]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7b98      	ldrb	r0, [r3, #14]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	8b12      	ldrh	r2, [r2, #24]
 800770e:	9202      	str	r2, [sp, #8]
 8007710:	2202      	movs	r2, #2
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4623      	mov	r3, r4
 8007718:	4602      	mov	r2, r0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 fed4 	bl	80094c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	7b19      	ldrb	r1, [r3, #12]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	7bd8      	ldrb	r0, [r3, #15]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	8b52      	ldrh	r2, [r2, #26]
 8007738:	9202      	str	r2, [sp, #8]
 800773a:	2202      	movs	r2, #2
 800773c:	9201      	str	r2, [sp, #4]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4623      	mov	r3, r4
 8007742:	4602      	mov	r2, r0
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 febf 	bl	80094c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	7b5b      	ldrb	r3, [r3, #13]
 8007756:	2200      	movs	r2, #0
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f002 f9ca 	bl	8009af4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	7b1b      	ldrb	r3, [r3, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f002 f9c3 	bl	8009af4 <USBH_LL_SetToggle>

  return USBH_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	bd90      	pop	{r4, r7, pc}

08007778 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00e      	beq.n	80077b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 feb4 	bl	8009506 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 fedf 	bl	8009568 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	7b1b      	ldrb	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	7b1b      	ldrb	r3, [r3, #12]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 fea1 	bl	8009506 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	7b1b      	ldrb	r3, [r3, #12]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fecc 	bl	8009568 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	7b5b      	ldrb	r3, [r3, #13]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00e      	beq.n	80077fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7b5b      	ldrb	r3, [r3, #13]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 fe8e 	bl	8009506 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	7b5b      	ldrb	r3, [r3, #13]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 feb9 	bl	8009568 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	4618      	mov	r0, r3
 8007812:	f002 f9fd 	bl	8009c10 <free>
    phost->pActiveClass->pData = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781c:	2200      	movs	r2, #0
 800781e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3340      	adds	r3, #64	; 0x40
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8b1 	bl	80079aa <GetLineCoding>
 8007848:	4603      	mov	r3, r0
 800784a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007858:	2102      	movs	r1, #2
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800785e:	7afb      	ldrb	r3, [r7, #11]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007888:	2b04      	cmp	r3, #4
 800788a:	d877      	bhi.n	800797c <USBH_CDC_Process+0x114>
 800788c:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <USBH_CDC_Process+0x2c>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078a9 	.word	0x080078a9
 8007898:	080078af 	.word	0x080078af
 800789c:	080078df 	.word	0x080078df
 80078a0:	08007953 	.word	0x08007953
 80078a4:	08007961 	.word	0x08007961
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
      break;
 80078ac:	e06d      	b.n	800798a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f897 	bl	80079e8 <SetLineCoding>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078cc:	e058      	b.n	8007980 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d055      	beq.n	8007980 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2204      	movs	r2, #4
 80078d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078dc:	e050      	b.n	8007980 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3340      	adds	r3, #64	; 0x40
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f860 	bl	80079aa <GetLineCoding>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d126      	bne.n	8007942 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007906:	791b      	ldrb	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d13b      	bne.n	8007984 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007916:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007918:	429a      	cmp	r2, r3
 800791a:	d133      	bne.n	8007984 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007926:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007928:	429a      	cmp	r2, r3
 800792a:	d12b      	bne.n	8007984 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007934:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007936:	429a      	cmp	r2, r3
 8007938:	d124      	bne.n	8007984 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f958 	bl	8007bf0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007940:	e020      	b.n	8007984 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d01d      	beq.n	8007984 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2204      	movs	r2, #4
 800794c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007950:	e018      	b.n	8007984 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f867 	bl	8007a26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8da 	bl	8007b12 <CDC_ProcessReception>
      break;
 800795e:	e014      	b.n	800798a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007960:	2100      	movs	r1, #0
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 f822 	bl	80089ac <USBH_ClrFeature>
 8007968:	4603      	mov	r3, r0
 800796a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800797a:	e005      	b.n	8007988 <USBH_CDC_Process+0x120>

    default:
      break;
 800797c:	bf00      	nop
 800797e:	e004      	b.n	800798a <USBH_CDC_Process+0x122>
      break;
 8007980:	bf00      	nop
 8007982:	e002      	b.n	800798a <USBH_CDC_Process+0x122>
      break;
 8007984:	bf00      	nop
 8007986:	e000      	b.n	800798a <USBH_CDC_Process+0x122>
      break;
 8007988:	bf00      	nop

  }

  return status;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	22a1      	movs	r2, #161	; 0xa1
 80079b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2221      	movs	r2, #33	; 0x21
 80079be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2207      	movs	r2, #7
 80079d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2207      	movs	r2, #7
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fb23 	bl	8009024 <USBH_CtlReq>
 80079de:	4603      	mov	r3, r0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2221      	movs	r2, #33	; 0x21
 80079f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2207      	movs	r2, #7
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fb04 	bl	8009024 <USBH_CtlReq>
 8007a1c:	4603      	mov	r3, r0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af02      	add	r7, sp, #8
 8007a2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d002      	beq.n	8007a4c <CDC_ProcessTransmission+0x26>
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d023      	beq.n	8007a92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a4a:	e05e      	b.n	8007b0a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	8b12      	ldrh	r2, [r2, #24]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d90b      	bls.n	8007a70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	69d9      	ldr	r1, [r3, #28]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8b1a      	ldrh	r2, [r3, #24]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	7b5b      	ldrb	r3, [r3, #13]
 8007a64:	2001      	movs	r0, #1
 8007a66:	9000      	str	r0, [sp, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fcea 	bl	8009442 <USBH_BulkSendData>
 8007a6e:	e00b      	b.n	8007a88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	7b5b      	ldrb	r3, [r3, #13]
 8007a7e:	2001      	movs	r0, #1
 8007a80:	9000      	str	r0, [sp, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fcdd 	bl	8009442 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a90:	e03b      	b.n	8007b0a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	7b5b      	ldrb	r3, [r3, #13]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f002 f801 	bl	8009aa0 <USBH_LL_GetURBState>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007aa2:	7afb      	ldrb	r3, [r7, #11]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d128      	bne.n	8007afa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	8b12      	ldrh	r2, [r2, #24]
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d90e      	bls.n	8007ad2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	8b12      	ldrh	r2, [r2, #24]
 8007abc:	1a9a      	subs	r2, r3, r2
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	8b12      	ldrh	r2, [r2, #24]
 8007aca:	441a      	add	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	61da      	str	r2, [r3, #28]
 8007ad0:	e002      	b.n	8007ad8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ae8:	e00e      	b.n	8007b08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f868 	bl	8007bc8 <USBH_CDC_TransmitCallback>
      break;
 8007af8:	e006      	b.n	8007b08 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d103      	bne.n	8007b08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b08:	bf00      	nop
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b24:	2300      	movs	r3, #0
 8007b26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d002      	beq.n	8007b38 <CDC_ProcessReception+0x26>
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d00e      	beq.n	8007b54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b36:	e043      	b.n	8007bc0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	6a19      	ldr	r1, [r3, #32]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	8b5a      	ldrh	r2, [r3, #26]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	7b1b      	ldrb	r3, [r3, #12]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fca1 	bl	800948c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b52:	e035      	b.n	8007bc0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	7b1b      	ldrb	r3, [r3, #12]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 ffa0 	bl	8009aa0 <USBH_LL_GetURBState>
 8007b60:	4603      	mov	r3, r0
 8007b62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d129      	bne.n	8007bbe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	7b1b      	ldrb	r3, [r3, #12]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 ff03 	bl	800997c <USBH_LL_GetLastXferSize>
 8007b76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d016      	beq.n	8007bb0 <CDC_ProcessReception+0x9e>
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	8b5b      	ldrh	r3, [r3, #26]
 8007b86:	461a      	mov	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d910      	bls.n	8007bb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6a1a      	ldr	r2, [r3, #32]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2203      	movs	r2, #3
 8007baa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007bae:	e006      	b.n	8007bbe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f80f 	bl	8007bdc <USBH_CDC_ReceiveCallback>
      break;
 8007bbe:	bf00      	nop
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e029      	b.n	8007c70 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	79fa      	ldrb	r2, [r7, #7]
 8007c20:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f81f 	bl	8007c78 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f001 fdd3 	bl	8009814 <USBH_LL_Init>

  return USBH_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e009      	b.n	8007c9e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	33e0      	adds	r3, #224	; 0xe0
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	2200      	movs	r2, #0
 8007c96:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b0f      	cmp	r3, #15
 8007ca2:	d9f2      	bls.n	8007c8a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e009      	b.n	8007cbe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc4:	d3f1      	bcc.n	8007caa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2240      	movs	r2, #64	; 0x40
 8007cea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	331c      	adds	r3, #28
 8007d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f002 f84b 	bl	8009db8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 f842 	bl	8009db8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007d3a:	2212      	movs	r2, #18
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f002 f83a 	bl	8009db8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d4a:	223e      	movs	r2, #62	; 0x3e
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 f832 	bl	8009db8 <memset>

  return USBH_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d016      	beq.n	8007da0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10e      	bne.n	8007d9a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d82:	1c59      	adds	r1, r3, #1
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	33de      	adds	r3, #222	; 0xde
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e004      	b.n	8007da4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	73fb      	strb	r3, [r7, #15]
 8007d9e:	e001      	b.n	8007da4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007da0:	2302      	movs	r3, #2
 8007da2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d204      	bcs.n	8007dd8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007dd6:	e001      	b.n	8007ddc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b087      	sub	sp, #28
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	461a      	mov	r2, r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	70fb      	strb	r3, [r7, #3]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70bb      	strb	r3, [r7, #2]
 8007e00:	4613      	mov	r3, r2
 8007e02:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e12:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e14:	e025      	b.n	8007e62 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	221a      	movs	r2, #26
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	3308      	adds	r3, #8
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	3302      	adds	r3, #2
 8007e26:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	795b      	ldrb	r3, [r3, #5]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d002      	beq.n	8007e38 <USBH_FindInterface+0x4e>
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	2bff      	cmp	r3, #255	; 0xff
 8007e36:	d111      	bne.n	8007e5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e3c:	78ba      	ldrb	r2, [r7, #2]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d002      	beq.n	8007e48 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e42:	78bb      	ldrb	r3, [r7, #2]
 8007e44:	2bff      	cmp	r3, #255	; 0xff
 8007e46:	d109      	bne.n	8007e5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e4c:	787a      	ldrb	r2, [r7, #1]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d002      	beq.n	8007e58 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e52:	787b      	ldrb	r3, [r7, #1]
 8007e54:	2bff      	cmp	r3, #255	; 0xff
 8007e56:	d101      	bne.n	8007e5c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	e006      	b.n	8007e6a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d9d6      	bls.n	8007e16 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e68:	23ff      	movs	r3, #255	; 0xff
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fd04 	bl	800988c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007e84:	2101      	movs	r1, #1
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fe1d 	bl	8009ac6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af04      	add	r7, sp, #16
 8007e9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d102      	bne.n	8007eba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b0b      	cmp	r3, #11
 8007ec2:	f200 81be 	bhi.w	8008242 <USBH_Process+0x3aa>
 8007ec6:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <USBH_Process+0x34>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007efd 	.word	0x08007efd
 8007ed0:	08007f2f 	.word	0x08007f2f
 8007ed4:	08007f97 	.word	0x08007f97
 8007ed8:	080081dd 	.word	0x080081dd
 8007edc:	08008243 	.word	0x08008243
 8007ee0:	0800803b 	.word	0x0800803b
 8007ee4:	08008183 	.word	0x08008183
 8007ee8:	08008071 	.word	0x08008071
 8007eec:	08008091 	.word	0x08008091
 8007ef0:	080080b1 	.word	0x080080b1
 8007ef4:	080080f5 	.word	0x080080f5
 8007ef8:	080081c5 	.word	0x080081c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 819e 	beq.w	8008246 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f10:	20c8      	movs	r0, #200	; 0xc8
 8007f12:	f001 fe22 	bl	8009b5a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fd15 	bl	8009946 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f2c:	e18b      	b.n	8008246 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d107      	bne.n	8007f48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f46:	e18d      	b.n	8008264 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f52:	d914      	bls.n	8007f7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d903      	bls.n	8007f76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	220d      	movs	r2, #13
 8007f72:	701a      	strb	r2, [r3, #0]
      break;
 8007f74:	e176      	b.n	8008264 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	701a      	strb	r2, [r3, #0]
      break;
 8007f7c:	e172      	b.n	8008264 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f84:	f103 020a 	add.w	r2, r3, #10
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f8e:	200a      	movs	r0, #10
 8007f90:	f001 fde3 	bl	8009b5a <USBH_Delay>
      break;
 8007f94:	e166      	b.n	8008264 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fa6:	2104      	movs	r1, #4
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fac:	2064      	movs	r0, #100	; 0x64
 8007fae:	f001 fdd4 	bl	8009b5a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fca0 	bl	80098f8 <USBH_LL_GetSpeed>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2205      	movs	r2, #5
 8007fc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 faab 	bl	8009526 <USBH_AllocPipe>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 faa3 	bl	8009526 <USBH_AllocPipe>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7919      	ldrb	r1, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ffc:	b292      	uxth	r2, r2
 8007ffe:	9202      	str	r2, [sp, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	9201      	str	r2, [sp, #4]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	4603      	mov	r3, r0
 8008008:	2280      	movs	r2, #128	; 0x80
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fa5c 	bl	80094c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7959      	ldrb	r1, [r3, #5]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008024:	b292      	uxth	r2, r2
 8008026:	9202      	str	r2, [sp, #8]
 8008028:	2200      	movs	r2, #0
 800802a:	9201      	str	r2, [sp, #4]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4603      	mov	r3, r0
 8008030:	2200      	movs	r2, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fa48 	bl	80094c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008038:	e114      	b.n	8008264 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f918 	bl	8008270 <USBH_HandleEnum>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 80fe 	bne.w	800824a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800805c:	2b01      	cmp	r3, #1
 800805e:	d103      	bne.n	8008068 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2208      	movs	r2, #8
 8008064:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008066:	e0f0      	b.n	800824a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2207      	movs	r2, #7
 800806c:	701a      	strb	r2, [r3, #0]
      break;
 800806e:	e0ec      	b.n	800824a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 80e9 	beq.w	800824e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2208      	movs	r2, #8
 800808c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800808e:	e0de      	b.n	800824e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008096:	b29b      	uxth	r3, r3
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fc3f 	bl	800891e <USBH_SetCfg>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 80d5 	bne.w	8008252 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2209      	movs	r2, #9
 80080ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080ae:	e0d0      	b.n	8008252 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d016      	beq.n	80080ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80080be:	2101      	movs	r1, #1
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc4f 	bl	8008964 <USBH_SetFeature>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	220a      	movs	r2, #10
 80080d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080d8:	e0bd      	b.n	8008256 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	f040 80b9 	bne.w	8008256 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	220a      	movs	r2, #10
 80080e8:	701a      	strb	r2, [r3, #0]
      break;
 80080ea:	e0b4      	b.n	8008256 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	220a      	movs	r2, #10
 80080f0:	701a      	strb	r2, [r3, #0]
      break;
 80080f2:	e0b0      	b.n	8008256 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80ad 	beq.w	800825a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
 800810c:	e016      	b.n	800813c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800810e:	7bfa      	ldrb	r2, [r7, #15]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	32de      	adds	r2, #222	; 0xde
 8008114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008118:	791a      	ldrb	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008120:	429a      	cmp	r2, r3
 8008122:	d108      	bne.n	8008136 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008124:	7bfa      	ldrb	r2, [r7, #15]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	32de      	adds	r2, #222	; 0xde
 800812a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008134:	e005      	b.n	8008142 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	3301      	adds	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0e5      	beq.n	800810e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d016      	beq.n	800817a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2206      	movs	r2, #6
 8008162:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800816a:	2103      	movs	r1, #3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008170:	e073      	b.n	800825a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	220d      	movs	r2, #13
 8008176:	701a      	strb	r2, [r3, #0]
      break;
 8008178:	e06f      	b.n	800825a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220d      	movs	r2, #13
 800817e:	701a      	strb	r2, [r3, #0]
      break;
 8008180:	e06b      	b.n	800825a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d017      	beq.n	80081bc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	4798      	blx	r3
 8008198:	4603      	mov	r3, r0
 800819a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	220b      	movs	r2, #11
 80081a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081aa:	e058      	b.n	800825e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d154      	bne.n	800825e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	220d      	movs	r2, #13
 80081b8:	701a      	strb	r2, [r3, #0]
      break;
 80081ba:	e050      	b.n	800825e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	220d      	movs	r2, #13
 80081c0:	701a      	strb	r2, [r3, #0]
      break;
 80081c2:	e04c      	b.n	800825e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d049      	beq.n	8008262 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
      }
      break;
 80081da:	e042      	b.n	8008262 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fd47 	bl	8007c78 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008218:	2105      	movs	r1, #5
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b01      	cmp	r3, #1
 8008228:	d107      	bne.n	800823a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff fe1f 	bl	8007e76 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008238:	e014      	b.n	8008264 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fb26 	bl	800988c <USBH_LL_Start>
      break;
 8008240:	e010      	b.n	8008264 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008242:	bf00      	nop
 8008244:	e00e      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 8008246:	bf00      	nop
 8008248:	e00c      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 800824a:	bf00      	nop
 800824c:	e00a      	b.n	8008264 <USBH_Process+0x3cc>
    break;
 800824e:	bf00      	nop
 8008250:	e008      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 8008252:	bf00      	nop
 8008254:	e006      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 8008256:	bf00      	nop
 8008258:	e004      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 800825a:	bf00      	nop
 800825c:	e002      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 800825e:	bf00      	nop
 8008260:	e000      	b.n	8008264 <USBH_Process+0x3cc>
      break;
 8008262:	bf00      	nop
  }
  return USBH_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop

08008270 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af04      	add	r7, sp, #16
 8008276:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800827c:	2301      	movs	r3, #1
 800827e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b07      	cmp	r3, #7
 8008286:	f200 81c1 	bhi.w	800860c <USBH_HandleEnum+0x39c>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBH_HandleEnum+0x20>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082b1 	.word	0x080082b1
 8008294:	0800836f 	.word	0x0800836f
 8008298:	080083d9 	.word	0x080083d9
 800829c:	08008467 	.word	0x08008467
 80082a0:	080084d1 	.word	0x080084d1
 80082a4:	08008541 	.word	0x08008541
 80082a8:	08008587 	.word	0x08008587
 80082ac:	080085cd 	.word	0x080085cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082b0:	2108      	movs	r1, #8
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa50 	bl	8008758 <USBH_Get_DevDesc>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d130      	bne.n	8008324 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7919      	ldrb	r1, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082e6:	b292      	uxth	r2, r2
 80082e8:	9202      	str	r2, [sp, #8]
 80082ea:	2200      	movs	r2, #0
 80082ec:	9201      	str	r2, [sp, #4]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	4603      	mov	r3, r0
 80082f2:	2280      	movs	r2, #128	; 0x80
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f8e7 	bl	80094c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7959      	ldrb	r1, [r3, #5]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800830e:	b292      	uxth	r2, r2
 8008310:	9202      	str	r2, [sp, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4603      	mov	r3, r0
 800831a:	2200      	movs	r2, #0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f8d3 	bl	80094c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008322:	e175      	b.n	8008610 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b03      	cmp	r3, #3
 8008328:	f040 8172 	bne.w	8008610 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008332:	3301      	adds	r3, #1
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008342:	2b03      	cmp	r3, #3
 8008344:	d903      	bls.n	800834e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	220d      	movs	r2, #13
 800834a:	701a      	strb	r2, [r3, #0]
      break;
 800834c:	e160      	b.n	8008610 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f907 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f901 	bl	8009568 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	701a      	strb	r2, [r3, #0]
      break;
 800836c:	e150      	b.n	8008610 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800836e:	2112      	movs	r1, #18
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f9f1 	bl	8008758 <USBH_Get_DevDesc>
 8008376:	4603      	mov	r3, r0
 8008378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d103      	bne.n	8008388 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008386:	e145      	b.n	8008614 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b03      	cmp	r3, #3
 800838c:	f040 8142 	bne.w	8008614 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008396:	3301      	adds	r3, #1
 8008398:	b2da      	uxtb	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d903      	bls.n	80083b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	220d      	movs	r2, #13
 80083ae:	701a      	strb	r2, [r3, #0]
      break;
 80083b0:	e130      	b.n	8008614 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	795b      	ldrb	r3, [r3, #5]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 f8d5 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	791b      	ldrb	r3, [r3, #4]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f8cf 	bl	8009568 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
      break;
 80083d6:	e11d      	b.n	8008614 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083d8:	2101      	movs	r1, #1
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa7b 	bl	80088d6 <USBH_SetAddress>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d132      	bne.n	8008450 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80083ea:	2002      	movs	r0, #2
 80083ec:	f001 fbb5 	bl	8009b5a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2203      	movs	r2, #3
 80083fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7919      	ldrb	r1, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008412:	b292      	uxth	r2, r2
 8008414:	9202      	str	r2, [sp, #8]
 8008416:	2200      	movs	r2, #0
 8008418:	9201      	str	r2, [sp, #4]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4603      	mov	r3, r0
 800841e:	2280      	movs	r2, #128	; 0x80
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f851 	bl	80094c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	7959      	ldrb	r1, [r3, #5]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800843a:	b292      	uxth	r2, r2
 800843c:	9202      	str	r2, [sp, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	9201      	str	r2, [sp, #4]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4603      	mov	r3, r0
 8008446:	2200      	movs	r2, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f83d 	bl	80094c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800844e:	e0e3      	b.n	8008618 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b03      	cmp	r3, #3
 8008454:	f040 80e0 	bne.w	8008618 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	220d      	movs	r2, #13
 800845c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	705a      	strb	r2, [r3, #1]
      break;
 8008464:	e0d8      	b.n	8008618 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008466:	2109      	movs	r1, #9
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f9a1 	bl	80087b0 <USBH_Get_CfgDesc>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2204      	movs	r2, #4
 800847c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800847e:	e0cd      	b.n	800861c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b03      	cmp	r3, #3
 8008484:	f040 80ca 	bne.w	800861c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800848e:	3301      	adds	r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d903      	bls.n	80084aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	220d      	movs	r2, #13
 80084a6:	701a      	strb	r2, [r3, #0]
      break;
 80084a8:	e0b8      	b.n	800861c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	795b      	ldrb	r3, [r3, #5]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f859 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 f853 	bl	8009568 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
      break;
 80084ce:	e0a5      	b.n	800861c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f969 	bl	80087b0 <USBH_Get_CfgDesc>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d103      	bne.n	80084f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2205      	movs	r2, #5
 80084ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ee:	e097      	b.n	8008620 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	f040 8094 	bne.w	8008620 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084fe:	3301      	adds	r3, #1
 8008500:	b2da      	uxtb	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800850e:	2b03      	cmp	r3, #3
 8008510:	d903      	bls.n	800851a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	220d      	movs	r2, #13
 8008516:	701a      	strb	r2, [r3, #0]
      break;
 8008518:	e082      	b.n	8008620 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	795b      	ldrb	r3, [r3, #5]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 f821 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	791b      	ldrb	r3, [r3, #4]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f81b 	bl	8009568 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
      break;
 800853e:	e06f      	b.n	8008620 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008546:	2b00      	cmp	r3, #0
 8008548:	d019      	beq.n	800857e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008556:	23ff      	movs	r3, #255	; 0xff
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f953 	bl	8008804 <USBH_Get_StringDesc>
 800855e:	4603      	mov	r3, r0
 8008560:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2206      	movs	r2, #6
 800856c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800856e:	e059      	b.n	8008624 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b03      	cmp	r3, #3
 8008574:	d156      	bne.n	8008624 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2206      	movs	r2, #6
 800857a:	705a      	strb	r2, [r3, #1]
      break;
 800857c:	e052      	b.n	8008624 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2206      	movs	r2, #6
 8008582:	705a      	strb	r2, [r3, #1]
      break;
 8008584:	e04e      	b.n	8008624 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800858c:	2b00      	cmp	r3, #0
 800858e:	d019      	beq.n	80085c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800859c:	23ff      	movs	r3, #255	; 0xff
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f930 	bl	8008804 <USBH_Get_StringDesc>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d103      	bne.n	80085b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2207      	movs	r2, #7
 80085b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085b4:	e038      	b.n	8008628 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d135      	bne.n	8008628 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2207      	movs	r2, #7
 80085c0:	705a      	strb	r2, [r3, #1]
      break;
 80085c2:	e031      	b.n	8008628 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2207      	movs	r2, #7
 80085c8:	705a      	strb	r2, [r3, #1]
      break;
 80085ca:	e02d      	b.n	8008628 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d017      	beq.n	8008606 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085e2:	23ff      	movs	r3, #255	; 0xff
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f90d 	bl	8008804 <USBH_Get_StringDesc>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80085f8:	e018      	b.n	800862c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d115      	bne.n	800862c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
      break;
 8008604:	e012      	b.n	800862c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
      break;
 800860a:	e00f      	b.n	800862c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800860c:	bf00      	nop
 800860e:	e00e      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 8008610:	bf00      	nop
 8008612:	e00c      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 8008614:	bf00      	nop
 8008616:	e00a      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 8008618:	bf00      	nop
 800861a:	e008      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 800861c:	bf00      	nop
 800861e:	e006      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 8008620:	bf00      	nop
 8008622:	e004      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 8008624:	bf00      	nop
 8008626:	e002      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 8008628:	bf00      	nop
 800862a:	e000      	b.n	800862e <USBH_HandleEnum+0x3be>
      break;
 800862c:	bf00      	nop
  }
  return Status;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f804 	bl	800867a <USBH_HandleSof>
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b0b      	cmp	r3, #11
 800868a:	d10a      	bne.n	80086a2 <USBH_HandleSof+0x28>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
  }
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80086ba:	bf00      	nop
}
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80086d6:	bf00      	nop
}
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f8c6 	bl	80098c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	791b      	ldrb	r3, [r3, #4]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 ff13 	bl	8009568 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	795b      	ldrb	r3, [r3, #5]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 ff0d 	bl	8009568 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af02      	add	r7, sp, #8
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008764:	887b      	ldrh	r3, [r7, #2]
 8008766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876a:	d901      	bls.n	8008770 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800876c:	2303      	movs	r3, #3
 800876e:	e01b      	b.n	80087a8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008776:	887b      	ldrh	r3, [r7, #2]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	4613      	mov	r3, r2
 800877c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f872 	bl	800886c <USBH_GetDescriptor>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d109      	bne.n	80087a6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008798:	887a      	ldrh	r2, [r7, #2]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f929 	bl	80089f4 <USBH_ParseDevDesc>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	331c      	adds	r3, #28
 80087c0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80087c2:	887b      	ldrh	r3, [r7, #2]
 80087c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c8:	d901      	bls.n	80087ce <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e016      	b.n	80087fc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087ce:	887b      	ldrh	r3, [r7, #2]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087d8:	2100      	movs	r1, #0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f846 	bl	800886c <USBH_GetDescriptor>
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80087ea:	887b      	ldrh	r3, [r7, #2]
 80087ec:	461a      	mov	r2, r3
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f9b3 	bl	8008b5c <USBH_ParseCfgDesc>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	461a      	mov	r2, r3
 8008810:	460b      	mov	r3, r1
 8008812:	72fb      	strb	r3, [r7, #11]
 8008814:	4613      	mov	r3, r2
 8008816:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008818:	893b      	ldrh	r3, [r7, #8]
 800881a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881e:	d802      	bhi.n	8008826 <USBH_Get_StringDesc+0x22>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008826:	2303      	movs	r3, #3
 8008828:	e01c      	b.n	8008864 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008832:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800883a:	893b      	ldrh	r3, [r7, #8]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	460b      	mov	r3, r1
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 f812 	bl	800886c <USBH_GetDescriptor>
 8008848:	4603      	mov	r3, r0
 800884a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d107      	bne.n	8008862 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008858:	893a      	ldrh	r2, [r7, #8]
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fb93 	bl	8008f88 <USBH_ParseStringDesc>
  }

  return status;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	72fb      	strb	r3, [r7, #11]
 800887a:	4613      	mov	r3, r2
 800887c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	789b      	ldrb	r3, [r3, #2]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d11c      	bne.n	80088c0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800888c:	b2da      	uxtb	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2206      	movs	r2, #6
 8008896:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	893a      	ldrh	r2, [r7, #8]
 800889c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800889e:	893b      	ldrh	r3, [r7, #8]
 80088a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80088a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088a8:	d104      	bne.n	80088b4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f240 4209 	movw	r2, #1033	; 0x409
 80088b0:	829a      	strh	r2, [r3, #20]
 80088b2:	e002      	b.n	80088ba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8b3a      	ldrh	r2, [r7, #24]
 80088be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80088c0:	8b3b      	ldrh	r3, [r7, #24]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fbac 	bl	8009024 <USBH_CtlReq>
 80088cc:	4603      	mov	r3, r0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	789b      	ldrb	r3, [r3, #2]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d10f      	bne.n	800890a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2205      	movs	r2, #5
 80088f4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fb88 	bl	8009024 <USBH_CtlReq>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	789b      	ldrb	r3, [r3, #2]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d10e      	bne.n	8008950 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2209      	movs	r2, #9
 800893c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	887a      	ldrh	r2, [r7, #2]
 8008942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008950:	2200      	movs	r2, #0
 8008952:	2100      	movs	r1, #0
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fb65 	bl	8009024 <USBH_CtlReq>
 800895a:	4603      	mov	r3, r0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	789b      	ldrb	r3, [r3, #2]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d10f      	bne.n	8008998 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2203      	movs	r2, #3
 8008982:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	b29a      	uxth	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008998:	2200      	movs	r2, #0
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fb41 	bl	8009024 <USBH_CtlReq>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	789b      	ldrb	r3, [r3, #2]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d10f      	bne.n	80089e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089e0:	2200      	movs	r2, #0
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fb1d 	bl	8009024 <USBH_CtlReq>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008a08:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008a14:	2302      	movs	r3, #2
 8008a16:	e098      	b.n	8008b4a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	785a      	ldrb	r2, [r3, #1]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3303      	adds	r3, #3
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	791a      	ldrb	r2, [r3, #4]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	795a      	ldrb	r2, [r3, #5]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	799a      	ldrb	r2, [r3, #6]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	79da      	ldrb	r2, [r3, #7]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d11b      	bne.n	8008ab0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	79db      	ldrb	r3, [r3, #7]
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	dc0f      	bgt.n	8008aa0 <USBH_ParseDevDesc+0xac>
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	db0f      	blt.n	8008aa4 <USBH_ParseDevDesc+0xb0>
 8008a84:	3b08      	subs	r3, #8
 8008a86:	4a34      	ldr	r2, [pc, #208]	; (8008b58 <USBH_ParseDevDesc+0x164>)
 8008a88:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bf14      	ite	ne
 8008a94:	2301      	movne	r3, #1
 8008a96:	2300      	moveq	r3, #0
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <USBH_ParseDevDesc+0xb8>
 8008a9e:	e001      	b.n	8008aa4 <USBH_ParseDevDesc+0xb0>
 8008aa0:	2b40      	cmp	r3, #64	; 0x40
 8008aa2:	d003      	beq.n	8008aac <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2208      	movs	r2, #8
 8008aa8:	71da      	strb	r2, [r3, #7]
        break;
 8008aaa:	e000      	b.n	8008aae <USBH_ParseDevDesc+0xba>
        break;
 8008aac:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008aae:	e00e      	b.n	8008ace <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d107      	bne.n	8008aca <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	79db      	ldrb	r3, [r3, #7]
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d005      	beq.n	8008ace <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	71da      	strb	r2, [r3, #7]
 8008ac8:	e001      	b.n	8008ace <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008aca:	2303      	movs	r3, #3
 8008acc:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d939      	bls.n	8008b48 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3309      	adds	r3, #9
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	330a      	adds	r3, #10
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	330b      	adds	r3, #11
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4313      	orrs	r3, r2
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	330d      	adds	r3, #13
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	7b9a      	ldrb	r2, [r3, #14]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	7bda      	ldrb	r2, [r3, #15]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7c1a      	ldrb	r2, [r3, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	7c5a      	ldrb	r2, [r3, #17]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	01000101 	.word	0x01000101

08008b5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08c      	sub	sp, #48	; 0x30
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e0db      	b.n	8008d46 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	785a      	ldrb	r2, [r3, #1]
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3303      	adds	r3, #3
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbe:	bf28      	it	cs
 8008bc0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	791a      	ldrb	r2, [r3, #4]
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	795a      	ldrb	r2, [r3, #5]
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	799a      	ldrb	r2, [r3, #6]
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	79da      	ldrb	r2, [r3, #7]
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	7a1a      	ldrb	r2, [r3, #8]
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b09      	cmp	r3, #9
 8008bf8:	d002      	beq.n	8008c00 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	2209      	movs	r2, #9
 8008bfe:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	2b09      	cmp	r3, #9
 8008c04:	f240 809d 	bls.w	8008d42 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c08:	2309      	movs	r3, #9
 8008c0a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c10:	e081      	b.n	8008d16 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c12:	f107 0316 	add.w	r3, r7, #22
 8008c16:	4619      	mov	r1, r3
 8008c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1a:	f000 f9e8 	bl	8008fee <USBH_GetNextDesc>
 8008c1e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	785b      	ldrb	r3, [r3, #1]
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d176      	bne.n	8008d16 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b09      	cmp	r3, #9
 8008c2e:	d002      	beq.n	8008c36 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	2209      	movs	r2, #9
 8008c34:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c3a:	221a      	movs	r2, #26
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	3308      	adds	r3, #8
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	4413      	add	r3, r2
 8008c46:	3302      	adds	r3, #2
 8008c48:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c4c:	69f8      	ldr	r0, [r7, #28]
 8008c4e:	f000 f87e 	bl	8008d4e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c5c:	e043      	b.n	8008ce6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c5e:	f107 0316 	add.w	r3, r7, #22
 8008c62:	4619      	mov	r1, r3
 8008c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c66:	f000 f9c2 	bl	8008fee <USBH_GetNextDesc>
 8008c6a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	2b05      	cmp	r3, #5
 8008c72:	d138      	bne.n	8008ce6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	795b      	ldrb	r3, [r3, #5]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d113      	bne.n	8008ca4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d003      	beq.n	8008c8c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	799b      	ldrb	r3, [r3, #6]
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d10b      	bne.n	8008ca4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	79db      	ldrb	r3, [r3, #7]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <USBH_ParseCfgDesc+0x150>
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b09      	cmp	r3, #9
 8008c9a:	d007      	beq.n	8008cac <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	2209      	movs	r2, #9
 8008ca0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ca2:	e003      	b.n	8008cac <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	2207      	movs	r2, #7
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	e000      	b.n	8008cae <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cac:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008cb6:	3201      	adds	r2, #1
 8008cb8:	00d2      	lsls	r2, r2, #3
 8008cba:	211a      	movs	r1, #26
 8008cbc:	fb01 f303 	mul.w	r3, r1, r3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3304      	adds	r3, #4
 8008cca:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cce:	69b9      	ldr	r1, [r7, #24]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f870 	bl	8008db6 <USBH_ParseEPDesc>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	791b      	ldrb	r3, [r3, #4]
 8008cea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d204      	bcs.n	8008cfc <USBH_ParseCfgDesc+0x1a0>
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	885a      	ldrh	r2, [r3, #2]
 8008cf6:	8afb      	ldrh	r3, [r7, #22]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d8b0      	bhi.n	8008c5e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	791b      	ldrb	r3, [r3, #4]
 8008d00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d201      	bcs.n	8008d0c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e01c      	b.n	8008d46 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d10:	3301      	adds	r3, #1
 8008d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d805      	bhi.n	8008d2a <USBH_ParseCfgDesc+0x1ce>
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	885a      	ldrh	r2, [r3, #2]
 8008d22:	8afb      	ldrh	r3, [r7, #22]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	f63f af74 	bhi.w	8008c12 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	bf28      	it	cs
 8008d32:	2302      	movcs	r3, #2
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d201      	bcs.n	8008d42 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e001      	b.n	8008d46 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3730      	adds	r7, #48	; 0x30
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785a      	ldrb	r2, [r3, #1]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	789a      	ldrb	r2, [r3, #2]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	78da      	ldrb	r2, [r3, #3]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	bf28      	it	cs
 8008d82:	2302      	movcs	r3, #2
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	795a      	ldrb	r2, [r3, #5]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	799a      	ldrb	r2, [r3, #6]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	79da      	ldrb	r2, [r3, #7]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	7a1a      	ldrb	r2, [r3, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	721a      	strb	r2, [r3, #8]
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b087      	sub	sp, #28
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	781a      	ldrb	r2, [r3, #0]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	785a      	ldrb	r2, [r3, #1]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	789a      	ldrb	r2, [r3, #2]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	78da      	ldrb	r2, [r3, #3]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3304      	adds	r3, #4
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3305      	adds	r3, #5
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	799a      	ldrb	r2, [r3, #6]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	889b      	ldrh	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1a:	d804      	bhi.n	8008e26 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e24:	d901      	bls.n	8008e2a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008e26:	2303      	movs	r3, #3
 8008e28:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d136      	bne.n	8008ea2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	78db      	ldrb	r3, [r3, #3]
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d108      	bne.n	8008e52 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	889b      	ldrh	r3, [r3, #4]
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e48:	f240 8097 	bls.w	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	75fb      	strb	r3, [r7, #23]
 8008e50:	e093      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	78db      	ldrb	r3, [r3, #3]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d107      	bne.n	8008e6e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	889b      	ldrh	r3, [r3, #4]
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	f240 8089 	bls.w	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	75fb      	strb	r3, [r7, #23]
 8008e6c:	e085      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	78db      	ldrb	r3, [r3, #3]
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d005      	beq.n	8008e86 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	78db      	ldrb	r3, [r3, #3]
 8008e7e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d10a      	bne.n	8008e9c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	799b      	ldrb	r3, [r3, #6]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <USBH_ParseEPDesc+0xe0>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	799b      	ldrb	r3, [r3, #6]
 8008e92:	2b10      	cmp	r3, #16
 8008e94:	d970      	bls.n	8008f78 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e96:	2303      	movs	r3, #3
 8008e98:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e9a:	e06d      	b.n	8008f78 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	75fb      	strb	r3, [r7, #23]
 8008ea0:	e06b      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d13c      	bne.n	8008f26 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	78db      	ldrb	r3, [r3, #3]
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d005      	beq.n	8008ec4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	78db      	ldrb	r3, [r3, #3]
 8008ebc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	889b      	ldrh	r3, [r3, #4]
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	d956      	bls.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ed0:	e053      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	78db      	ldrb	r3, [r3, #3]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d10e      	bne.n	8008efc <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	799b      	ldrb	r3, [r3, #6]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d007      	beq.n	8008ef6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d803      	bhi.n	8008ef6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008ef2:	2b40      	cmp	r3, #64	; 0x40
 8008ef4:	d941      	bls.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	75fb      	strb	r3, [r7, #23]
 8008efa:	e03e      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	78db      	ldrb	r3, [r3, #3]
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d10b      	bne.n	8008f20 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	799b      	ldrb	r3, [r3, #6]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d004      	beq.n	8008f1a <USBH_ParseEPDesc+0x164>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	889b      	ldrh	r3, [r3, #4]
 8008f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f18:	d32f      	bcc.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	75fb      	strb	r3, [r7, #23]
 8008f1e:	e02c      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f20:	2303      	movs	r3, #3
 8008f22:	75fb      	strb	r3, [r7, #23]
 8008f24:	e029      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d120      	bne.n	8008f72 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	78db      	ldrb	r3, [r3, #3]
 8008f34:	f003 0303 	and.w	r3, r3, #3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d106      	bne.n	8008f4a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	889b      	ldrh	r3, [r3, #4]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d01a      	beq.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008f44:	2303      	movs	r3, #3
 8008f46:	75fb      	strb	r3, [r7, #23]
 8008f48:	e017      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	78db      	ldrb	r3, [r3, #3]
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d10a      	bne.n	8008f6c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	799b      	ldrb	r3, [r3, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <USBH_ParseEPDesc+0x1b0>
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	889b      	ldrh	r3, [r3, #4]
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d909      	bls.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008f66:	2303      	movs	r3, #3
 8008f68:	75fb      	strb	r3, [r7, #23]
 8008f6a:	e006      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	75fb      	strb	r3, [r7, #23]
 8008f70:	e003      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008f72:	2303      	movs	r3, #3
 8008f74:	75fb      	strb	r3, [r7, #23]
 8008f76:	e000      	b.n	8008f7a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f78:	bf00      	nop
  }

  return status;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d120      	bne.n	8008fe2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	1e9a      	subs	r2, r3, #2
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	bf28      	it	cs
 8008fac:	4613      	movcs	r3, r2
 8008fae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3302      	adds	r3, #2
 8008fb4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	82fb      	strh	r3, [r7, #22]
 8008fba:	e00b      	b.n	8008fd4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008fbc:	8afb      	ldrh	r3, [r7, #22]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008fce:	8afb      	ldrh	r3, [r7, #22]
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	82fb      	strh	r3, [r7, #22]
 8008fd4:	8afa      	ldrh	r2, [r7, #22]
 8008fd6:	8abb      	ldrh	r3, [r7, #20]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3ef      	bcc.n	8008fbc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	701a      	strb	r2, [r3, #0]
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	881a      	ldrh	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	4413      	add	r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009016:	68fb      	ldr	r3, [r7, #12]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009032:	2301      	movs	r3, #1
 8009034:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	789b      	ldrb	r3, [r3, #2]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d002      	beq.n	8009044 <USBH_CtlReq+0x20>
 800903e:	2b02      	cmp	r3, #2
 8009040:	d00f      	beq.n	8009062 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009042:	e027      	b.n	8009094 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	88fa      	ldrh	r2, [r7, #6]
 800904e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2202      	movs	r2, #2
 800905a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800905c:	2301      	movs	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
      break;
 8009060:	e018      	b.n	8009094 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 f81c 	bl	80090a0 <USBH_HandleControl>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <USBH_CtlReq+0x54>
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	2b03      	cmp	r3, #3
 8009076:	d106      	bne.n	8009086 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	761a      	strb	r2, [r3, #24]
      break;
 8009084:	e005      	b.n	8009092 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d102      	bne.n	8009092 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	709a      	strb	r2, [r3, #2]
      break;
 8009092:	bf00      	nop
  }
  return status;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7e1b      	ldrb	r3, [r3, #24]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	2b0a      	cmp	r3, #10
 80090b8:	f200 8156 	bhi.w	8009368 <USBH_HandleControl+0x2c8>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <USBH_HandleControl+0x24>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	0800910b 	.word	0x0800910b
 80090cc:	08009175 	.word	0x08009175
 80090d0:	0800919b 	.word	0x0800919b
 80090d4:	080091d3 	.word	0x080091d3
 80090d8:	080091fd 	.word	0x080091fd
 80090dc:	0800924f 	.word	0x0800924f
 80090e0:	08009271 	.word	0x08009271
 80090e4:	080092ad 	.word	0x080092ad
 80090e8:	080092d3 	.word	0x080092d3
 80090ec:	08009311 	.word	0x08009311
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f103 0110 	add.w	r1, r3, #16
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f943 	bl	8009388 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	761a      	strb	r2, [r3, #24]
      break;
 8009108:	e139      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	795b      	ldrb	r3, [r3, #5]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fcc5 	bl	8009aa0 <USBH_LL_GetURBState>
 8009116:	4603      	mov	r3, r0
 8009118:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d11e      	bne.n	800915e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	7c1b      	ldrb	r3, [r3, #16]
 8009124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009128:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8adb      	ldrh	r3, [r3, #22]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009132:	7b7b      	ldrb	r3, [r7, #13]
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d103      	bne.n	8009140 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2203      	movs	r2, #3
 800913c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800913e:	e115      	b.n	800936c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2205      	movs	r2, #5
 8009144:	761a      	strb	r2, [r3, #24]
      break;
 8009146:	e111      	b.n	800936c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009148:	7b7b      	ldrb	r3, [r7, #13]
 800914a:	2b80      	cmp	r3, #128	; 0x80
 800914c:	d103      	bne.n	8009156 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2209      	movs	r2, #9
 8009152:	761a      	strb	r2, [r3, #24]
      break;
 8009154:	e10a      	b.n	800936c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2207      	movs	r2, #7
 800915a:	761a      	strb	r2, [r3, #24]
      break;
 800915c:	e106      	b.n	800936c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b04      	cmp	r3, #4
 8009162:	d003      	beq.n	800916c <USBH_HandleControl+0xcc>
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b02      	cmp	r3, #2
 8009168:	f040 8100 	bne.w	800936c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	220b      	movs	r2, #11
 8009170:	761a      	strb	r2, [r3, #24]
      break;
 8009172:	e0fb      	b.n	800936c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6899      	ldr	r1, [r3, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	899a      	ldrh	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	791b      	ldrb	r3, [r3, #4]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f93a 	bl	8009406 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2204      	movs	r2, #4
 8009196:	761a      	strb	r2, [r3, #24]
      break;
 8009198:	e0f1      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	791b      	ldrb	r3, [r3, #4]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fc7d 	bl	8009aa0 <USBH_LL_GetURBState>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d102      	bne.n	80091b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2209      	movs	r2, #9
 80091b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b05      	cmp	r3, #5
 80091ba:	d102      	bne.n	80091c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80091bc:	2303      	movs	r3, #3
 80091be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091c0:	e0d6      	b.n	8009370 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	f040 80d3 	bne.w	8009370 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	220b      	movs	r2, #11
 80091ce:	761a      	strb	r2, [r3, #24]
      break;
 80091d0:	e0ce      	b.n	8009370 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6899      	ldr	r1, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	899a      	ldrh	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	795b      	ldrb	r3, [r3, #5]
 80091de:	2001      	movs	r0, #1
 80091e0:	9000      	str	r0, [sp, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f8ea 	bl	80093bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2206      	movs	r2, #6
 80091f8:	761a      	strb	r2, [r3, #24]
      break;
 80091fa:	e0c0      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	795b      	ldrb	r3, [r3, #5]
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fc4c 	bl	8009aa0 <USBH_LL_GetURBState>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800920c:	7bbb      	ldrb	r3, [r7, #14]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d103      	bne.n	800921a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2207      	movs	r2, #7
 8009216:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009218:	e0ac      	b.n	8009374 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b05      	cmp	r3, #5
 800921e:	d105      	bne.n	800922c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	220c      	movs	r2, #12
 8009224:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009226:	2303      	movs	r3, #3
 8009228:	73fb      	strb	r3, [r7, #15]
      break;
 800922a:	e0a3      	b.n	8009374 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d103      	bne.n	800923a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2205      	movs	r2, #5
 8009236:	761a      	strb	r2, [r3, #24]
      break;
 8009238:	e09c      	b.n	8009374 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b04      	cmp	r3, #4
 800923e:	f040 8099 	bne.w	8009374 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	220b      	movs	r2, #11
 8009246:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009248:	2302      	movs	r3, #2
 800924a:	73fb      	strb	r3, [r7, #15]
      break;
 800924c:	e092      	b.n	8009374 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	791b      	ldrb	r3, [r3, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	2100      	movs	r1, #0
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f8d5 	bl	8009406 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2208      	movs	r2, #8
 800926c:	761a      	strb	r2, [r3, #24]

      break;
 800926e:	e086      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	791b      	ldrb	r3, [r3, #4]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fc12 	bl	8009aa0 <USBH_LL_GetURBState>
 800927c:	4603      	mov	r3, r0
 800927e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d105      	bne.n	8009292 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	220d      	movs	r2, #13
 800928a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009290:	e072      	b.n	8009378 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b04      	cmp	r3, #4
 8009296:	d103      	bne.n	80092a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	220b      	movs	r2, #11
 800929c:	761a      	strb	r2, [r3, #24]
      break;
 800929e:	e06b      	b.n	8009378 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	d168      	bne.n	8009378 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80092a6:	2303      	movs	r3, #3
 80092a8:	73fb      	strb	r3, [r7, #15]
      break;
 80092aa:	e065      	b.n	8009378 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	795b      	ldrb	r3, [r3, #5]
 80092b0:	2201      	movs	r2, #1
 80092b2:	9200      	str	r2, [sp, #0]
 80092b4:	2200      	movs	r2, #0
 80092b6:	2100      	movs	r1, #0
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f87f 	bl	80093bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	220a      	movs	r2, #10
 80092ce:	761a      	strb	r2, [r3, #24]
      break;
 80092d0:	e055      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	795b      	ldrb	r3, [r3, #5]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fbe1 	bl	8009aa0 <USBH_LL_GetURBState>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d105      	bne.n	80092f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	220d      	movs	r2, #13
 80092f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092f2:	e043      	b.n	800937c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d103      	bne.n	8009302 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2209      	movs	r2, #9
 80092fe:	761a      	strb	r2, [r3, #24]
      break;
 8009300:	e03c      	b.n	800937c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d139      	bne.n	800937c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	220b      	movs	r2, #11
 800930c:	761a      	strb	r2, [r3, #24]
      break;
 800930e:	e035      	b.n	800937c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7e5b      	ldrb	r3, [r3, #25]
 8009314:	3301      	adds	r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	765a      	strb	r2, [r3, #25]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7e5b      	ldrb	r3, [r3, #25]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d806      	bhi.n	8009332 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009330:	e025      	b.n	800937e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009338:	2106      	movs	r1, #6
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	795b      	ldrb	r3, [r3, #5]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f90c 	bl	8009568 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	791b      	ldrb	r3, [r3, #4]
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f906 	bl	8009568 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009362:	2302      	movs	r3, #2
 8009364:	73fb      	strb	r3, [r7, #15]
      break;
 8009366:	e00a      	b.n	800937e <USBH_HandleControl+0x2de>

    default:
      break;
 8009368:	bf00      	nop
 800936a:	e008      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 800936c:	bf00      	nop
 800936e:	e006      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 8009370:	bf00      	nop
 8009372:	e004      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 8009374:	bf00      	nop
 8009376:	e002      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 8009378:	bf00      	nop
 800937a:	e000      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 800937c:	bf00      	nop
  }

  return status;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af04      	add	r7, sp, #16
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009396:	79f9      	ldrb	r1, [r7, #7]
 8009398:	2300      	movs	r3, #0
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	2308      	movs	r3, #8
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	2200      	movs	r2, #0
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fb46 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af04      	add	r7, sp, #16
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4611      	mov	r1, r2
 80093c8:	461a      	mov	r2, r3
 80093ca:	460b      	mov	r3, r1
 80093cc:	80fb      	strh	r3, [r7, #6]
 80093ce:	4613      	mov	r3, r2
 80093d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093e0:	7979      	ldrb	r1, [r7, #5]
 80093e2:	7e3b      	ldrb	r3, [r7, #24]
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	9302      	str	r3, [sp, #8]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	2301      	movs	r3, #1
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	2200      	movs	r2, #0
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 fb21 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b088      	sub	sp, #32
 800940a:	af04      	add	r7, sp, #16
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	4611      	mov	r1, r2
 8009412:	461a      	mov	r2, r3
 8009414:	460b      	mov	r3, r1
 8009416:	80fb      	strh	r3, [r7, #6]
 8009418:	4613      	mov	r3, r2
 800941a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800941c:	7979      	ldrb	r1, [r7, #5]
 800941e:	2300      	movs	r3, #0
 8009420:	9303      	str	r3, [sp, #12]
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	2301      	movs	r3, #1
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	2300      	movs	r3, #0
 8009430:	2201      	movs	r2, #1
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fb03 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009438:	2300      	movs	r3, #0

}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b088      	sub	sp, #32
 8009446:	af04      	add	r7, sp, #16
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	4611      	mov	r1, r2
 800944e:	461a      	mov	r2, r3
 8009450:	460b      	mov	r3, r1
 8009452:	80fb      	strh	r3, [r7, #6]
 8009454:	4613      	mov	r3, r2
 8009456:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009466:	7979      	ldrb	r1, [r7, #5]
 8009468:	7e3b      	ldrb	r3, [r7, #24]
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	2301      	movs	r3, #1
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2302      	movs	r3, #2
 800947a:	2200      	movs	r2, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fade 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af04      	add	r7, sp, #16
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4611      	mov	r1, r2
 8009498:	461a      	mov	r2, r3
 800949a:	460b      	mov	r3, r1
 800949c:	80fb      	strh	r3, [r7, #6]
 800949e:	4613      	mov	r3, r2
 80094a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094a2:	7979      	ldrb	r1, [r7, #5]
 80094a4:	2300      	movs	r3, #0
 80094a6:	9303      	str	r3, [sp, #12]
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	2301      	movs	r3, #1
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2302      	movs	r3, #2
 80094b6:	2201      	movs	r2, #1
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fac0 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af04      	add	r7, sp, #16
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	70fb      	strb	r3, [r7, #3]
 80094da:	460b      	mov	r3, r1
 80094dc:	70bb      	strb	r3, [r7, #2]
 80094de:	4613      	mov	r3, r2
 80094e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094e2:	7878      	ldrb	r0, [r7, #1]
 80094e4:	78ba      	ldrb	r2, [r7, #2]
 80094e6:	78f9      	ldrb	r1, [r7, #3]
 80094e8:	8b3b      	ldrh	r3, [r7, #24]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	7d3b      	ldrb	r3, [r7, #20]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	7c3b      	ldrb	r3, [r7, #16]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	4603      	mov	r3, r0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa53 	bl	80099a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa72 	bl	8009a00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f836 	bl	80095a4 <USBH_GetFreePipe>
 8009538:	4603      	mov	r3, r0
 800953a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800953c:	89fb      	ldrh	r3, [r7, #14]
 800953e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009542:	4293      	cmp	r3, r2
 8009544:	d00a      	beq.n	800955c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	89fb      	ldrh	r3, [r7, #14]
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	33e0      	adds	r3, #224	; 0xe0
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	b2db      	uxtb	r3, r3
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	2b0f      	cmp	r3, #15
 8009578:	d80d      	bhi.n	8009596 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	33e0      	adds	r3, #224	; 0xe0
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	33e0      	adds	r3, #224	; 0xe0
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
 80095b4:	e00f      	b.n	80095d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	33e0      	adds	r3, #224	; 0xe0
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	e007      	b.n	80095e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	3301      	adds	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	2b0f      	cmp	r3, #15
 80095da:	d9ec      	bls.n	80095b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80095f0:	2201      	movs	r2, #1
 80095f2:	490e      	ldr	r1, [pc, #56]	; (800962c <MX_USB_HOST_Init+0x40>)
 80095f4:	480e      	ldr	r0, [pc, #56]	; (8009630 <MX_USB_HOST_Init+0x44>)
 80095f6:	f7fe fb05 	bl	8007c04 <USBH_Init>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009600:	f7f7 faf0 	bl	8000be4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009604:	490b      	ldr	r1, [pc, #44]	; (8009634 <MX_USB_HOST_Init+0x48>)
 8009606:	480a      	ldr	r0, [pc, #40]	; (8009630 <MX_USB_HOST_Init+0x44>)
 8009608:	f7fe fba9 	bl	8007d5e <USBH_RegisterClass>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009612:	f7f7 fae7 	bl	8000be4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009616:	4806      	ldr	r0, [pc, #24]	; (8009630 <MX_USB_HOST_Init+0x44>)
 8009618:	f7fe fc2d 	bl	8007e76 <USBH_Start>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009622:	f7f7 fadf 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009626:	bf00      	nop
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	0800964d 	.word	0x0800964d
 8009630:	2000023c 	.word	0x2000023c
 8009634:	2000000c 	.word	0x2000000c

08009638 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800963c:	4802      	ldr	r0, [pc, #8]	; (8009648 <MX_USB_HOST_Process+0x10>)
 800963e:	f7fe fc2b 	bl	8007e98 <USBH_Process>
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	2000023c 	.word	0x2000023c

0800964c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	3b01      	subs	r3, #1
 800965c:	2b04      	cmp	r3, #4
 800965e:	d819      	bhi.n	8009694 <USBH_UserProcess+0x48>
 8009660:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <USBH_UserProcess+0x1c>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009695 	.word	0x08009695
 800966c:	08009685 	.word	0x08009685
 8009670:	08009695 	.word	0x08009695
 8009674:	0800968d 	.word	0x0800968d
 8009678:	0800967d 	.word	0x0800967d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <USBH_UserProcess+0x58>)
 800967e:	2203      	movs	r2, #3
 8009680:	701a      	strb	r2, [r3, #0]
  break;
 8009682:	e008      	b.n	8009696 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009684:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <USBH_UserProcess+0x58>)
 8009686:	2202      	movs	r2, #2
 8009688:	701a      	strb	r2, [r3, #0]
  break;
 800968a:	e004      	b.n	8009696 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800968c:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <USBH_UserProcess+0x58>)
 800968e:	2201      	movs	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
  break;
 8009692:	e000      	b.n	8009696 <USBH_UserProcess+0x4a>

  default:
  break;
 8009694:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000614 	.word	0x20000614

080096a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	; 0x28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b0:	f107 0314 	add.w	r3, r7, #20
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	605a      	str	r2, [r3, #4]
 80096ba:	609a      	str	r2, [r3, #8]
 80096bc:	60da      	str	r2, [r3, #12]
 80096be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096c8:	d147      	bne.n	800975a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	4b25      	ldr	r3, [pc, #148]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 80096d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d2:	4a24      	ldr	r2, [pc, #144]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	6313      	str	r3, [r2, #48]	; 0x30
 80096da:	4b22      	ldr	r3, [pc, #136]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	613b      	str	r3, [r7, #16]
 80096e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80096e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	4619      	mov	r1, r3
 80096fa:	481b      	ldr	r0, [pc, #108]	; (8009768 <HAL_HCD_MspInit+0xc0>)
 80096fc:	f7f8 fa56 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009700:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009706:	2302      	movs	r3, #2
 8009708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970a:	2300      	movs	r3, #0
 800970c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800970e:	2300      	movs	r3, #0
 8009710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009712:	230a      	movs	r3, #10
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009716:	f107 0314 	add.w	r3, r7, #20
 800971a:	4619      	mov	r1, r3
 800971c:	4812      	ldr	r0, [pc, #72]	; (8009768 <HAL_HCD_MspInit+0xc0>)
 800971e:	f7f8 fa45 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009722:	4b10      	ldr	r3, [pc, #64]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 8009724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009726:	4a0f      	ldr	r2, [pc, #60]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 8009728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972c:	6353      	str	r3, [r2, #52]	; 0x34
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	4a0b      	ldr	r2, [pc, #44]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 8009738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800973c:	6453      	str	r3, [r2, #68]	; 0x44
 800973e:	4b09      	ldr	r3, [pc, #36]	; (8009764 <HAL_HCD_MspInit+0xbc>)
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	2043      	movs	r0, #67	; 0x43
 8009750:	f7f8 f9f5 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009754:	2043      	movs	r0, #67	; 0x43
 8009756:	f7f8 fa0e 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800975a:	bf00      	nop
 800975c:	3728      	adds	r7, #40	; 0x28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40023800 	.word	0x40023800
 8009768:	40020000 	.word	0x40020000

0800976c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe ff6b 	bl	8008656 <USBH_LL_IncTimer>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe ffa3 	bl	80086e2 <USBH_LL_Connect>
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe ffac 	bl	8008710 <USBH_LL_Disconnect>
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
 80097cc:	4613      	mov	r3, r2
 80097ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe ff5d 	bl	80086aa <USBH_LL_PortEnabled>
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe ff5d 	bl	80086c6 <USBH_LL_PortDisabled>
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009822:	2b01      	cmp	r3, #1
 8009824:	d12a      	bne.n	800987c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009826:	4a18      	ldr	r2, [pc, #96]	; (8009888 <USBH_LL_Init+0x74>)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a15      	ldr	r2, [pc, #84]	; (8009888 <USBH_LL_Init+0x74>)
 8009832:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009836:	4b14      	ldr	r3, [pc, #80]	; (8009888 <USBH_LL_Init+0x74>)
 8009838:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800983c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800983e:	4b12      	ldr	r3, [pc, #72]	; (8009888 <USBH_LL_Init+0x74>)
 8009840:	2208      	movs	r2, #8
 8009842:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009844:	4b10      	ldr	r3, [pc, #64]	; (8009888 <USBH_LL_Init+0x74>)
 8009846:	2201      	movs	r2, #1
 8009848:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <USBH_LL_Init+0x74>)
 800984c:	2200      	movs	r2, #0
 800984e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009850:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <USBH_LL_Init+0x74>)
 8009852:	2202      	movs	r2, #2
 8009854:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <USBH_LL_Init+0x74>)
 8009858:	2200      	movs	r2, #0
 800985a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800985c:	480a      	ldr	r0, [pc, #40]	; (8009888 <USBH_LL_Init+0x74>)
 800985e:	f7f8 fb5a 	bl	8001f16 <HAL_HCD_Init>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009868:	f7f7 f9bc 	bl	8000be4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800986c:	4806      	ldr	r0, [pc, #24]	; (8009888 <USBH_LL_Init+0x74>)
 800986e:	f7f8 ffbb 	bl	80027e8 <HAL_HCD_GetCurrentFrame>
 8009872:	4603      	mov	r3, r0
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fe fede 	bl	8008638 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000618 	.word	0x20000618

0800988c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f8 ff28 	bl	80026f8 <HAL_HCD_Start>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f95e 	bl	8009b70 <USBH_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098d8:	4618      	mov	r0, r3
 80098da:	f7f8 ff30 	bl	800273e <HAL_HCD_Stop>
 80098de:	4603      	mov	r3, r0
 80098e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f943 	bl	8009b70 <USBH_Get_USB_Status>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800990a:	4618      	mov	r0, r3
 800990c:	f7f8 ff7a 	bl	8002804 <HAL_HCD_GetCurrentSpeed>
 8009910:	4603      	mov	r3, r0
 8009912:	2b02      	cmp	r3, #2
 8009914:	d00c      	beq.n	8009930 <USBH_LL_GetSpeed+0x38>
 8009916:	2b02      	cmp	r3, #2
 8009918:	d80d      	bhi.n	8009936 <USBH_LL_GetSpeed+0x3e>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <USBH_LL_GetSpeed+0x2c>
 800991e:	2b01      	cmp	r3, #1
 8009920:	d003      	beq.n	800992a <USBH_LL_GetSpeed+0x32>
 8009922:	e008      	b.n	8009936 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
    break;
 8009928:	e008      	b.n	800993c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800992a:	2301      	movs	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
    break;
 800992e:	e005      	b.n	800993c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009930:	2302      	movs	r3, #2
 8009932:	73fb      	strb	r3, [r7, #15]
    break;
 8009934:	e002      	b.n	800993c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009936:	2301      	movs	r3, #1
 8009938:	73fb      	strb	r3, [r7, #15]
    break;
 800993a:	bf00      	nop
  }
  return  speed;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800995c:	4618      	mov	r0, r3
 800995e:	f7f8 ff0b 	bl	8002778 <HAL_HCD_ResetPort>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f901 	bl	8009b70 <USBH_Get_USB_Status>
 800996e:	4603      	mov	r3, r0
 8009970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009972:	7bbb      	ldrb	r3, [r7, #14]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7f8 ff13 	bl	80027be <HAL_HCD_HC_GetXferCount>
 8009998:	4603      	mov	r3, r0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099a2:	b590      	push	{r4, r7, lr}
 80099a4:	b089      	sub	sp, #36	; 0x24
 80099a6:	af04      	add	r7, sp, #16
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	461a      	mov	r2, r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	70fb      	strb	r3, [r7, #3]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70bb      	strb	r3, [r7, #2]
 80099b8:	4613      	mov	r3, r2
 80099ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80099ca:	787c      	ldrb	r4, [r7, #1]
 80099cc:	78ba      	ldrb	r2, [r7, #2]
 80099ce:	78f9      	ldrb	r1, [r7, #3]
 80099d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4623      	mov	r3, r4
 80099e2:	f7f8 faff 	bl	8001fe4 <HAL_HCD_HC_Init>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f8bf 	bl	8009b70 <USBH_Get_USB_Status>
 80099f2:	4603      	mov	r3, r0
 80099f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd90      	pop	{r4, r7, pc}

08009a00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f8 fb98 	bl	8002154 <HAL_HCD_HC_Halt>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f8a0 	bl	8009b70 <USBH_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a3e:	b590      	push	{r4, r7, lr}
 8009a40:	b089      	sub	sp, #36	; 0x24
 8009a42:	af04      	add	r7, sp, #16
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	70fb      	strb	r3, [r7, #3]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70bb      	strb	r3, [r7, #2]
 8009a54:	4613      	mov	r3, r2
 8009a56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a66:	787c      	ldrb	r4, [r7, #1]
 8009a68:	78ba      	ldrb	r2, [r7, #2]
 8009a6a:	78f9      	ldrb	r1, [r7, #3]
 8009a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a70:	9303      	str	r3, [sp, #12]
 8009a72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a74:	9302      	str	r3, [sp, #8]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4623      	mov	r3, r4
 8009a82:	f7f8 fb8b 	bl	800219c <HAL_HCD_HC_SubmitRequest>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f86f 	bl	8009b70 <USBH_Get_USB_Status>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd90      	pop	{r4, r7, pc}

08009aa0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f8 fe6c 	bl	8002794 <HAL_HCD_HC_GetURBState>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d103      	bne.n	8009ae4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f872 	bl	8009bc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009ae4:	20c8      	movs	r0, #200	; 0xc8
 8009ae6:	f7f7 fb5f 	bl	80011a8 <HAL_Delay>
  return USBH_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
 8009b00:	4613      	mov	r3, r2
 8009b02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	4613      	mov	r3, r2
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	3317      	adds	r3, #23
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	4613      	mov	r3, r2
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	333c      	adds	r3, #60	; 0x3c
 8009b32:	78ba      	ldrb	r2, [r7, #2]
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e009      	b.n	8009b4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	011b      	lsls	r3, r3, #4
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	333d      	adds	r3, #61	; 0x3d
 8009b48:	78ba      	ldrb	r2, [r7, #2]
 8009b4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f7 fb20 	bl	80011a8 <HAL_Delay>
}
 8009b68:	bf00      	nop
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d817      	bhi.n	8009bb4 <USBH_Get_USB_Status+0x44>
 8009b84:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <USBH_Get_USB_Status+0x1c>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009b9d 	.word	0x08009b9d
 8009b90:	08009ba3 	.word	0x08009ba3
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009baf 	.word	0x08009baf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba0:	e00b      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba6:	e008      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bac:	e005      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb2:	e002      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb8:	bf00      	nop
  }
  return usb_status;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
 8009be0:	e001      	b.n	8009be6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009be2:	2301      	movs	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	461a      	mov	r2, r3
 8009bea:	2101      	movs	r1, #1
 8009bec:	4803      	ldr	r0, [pc, #12]	; (8009bfc <MX_DriverVbusFS+0x34>)
 8009bee:	f7f8 f979 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40020800 	.word	0x40020800

08009c00 <malloc>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <malloc+0xc>)
 8009c02:	4601      	mov	r1, r0
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f000 b82b 	b.w	8009c60 <_malloc_r>
 8009c0a:	bf00      	nop
 8009c0c:	20000078 	.word	0x20000078

08009c10 <free>:
 8009c10:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <free+0xc>)
 8009c12:	4601      	mov	r1, r0
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f000 b913 	b.w	8009e40 <_free_r>
 8009c1a:	bf00      	nop
 8009c1c:	20000078 	.word	0x20000078

08009c20 <sbrk_aligned>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	4e0e      	ldr	r6, [pc, #56]	; (8009c5c <sbrk_aligned+0x3c>)
 8009c24:	460c      	mov	r4, r1
 8009c26:	6831      	ldr	r1, [r6, #0]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	b911      	cbnz	r1, 8009c32 <sbrk_aligned+0x12>
 8009c2c:	f000 f8cc 	bl	8009dc8 <_sbrk_r>
 8009c30:	6030      	str	r0, [r6, #0]
 8009c32:	4621      	mov	r1, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	f000 f8c7 	bl	8009dc8 <_sbrk_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d00a      	beq.n	8009c54 <sbrk_aligned+0x34>
 8009c3e:	1cc4      	adds	r4, r0, #3
 8009c40:	f024 0403 	bic.w	r4, r4, #3
 8009c44:	42a0      	cmp	r0, r4
 8009c46:	d007      	beq.n	8009c58 <sbrk_aligned+0x38>
 8009c48:	1a21      	subs	r1, r4, r0
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f000 f8bc 	bl	8009dc8 <_sbrk_r>
 8009c50:	3001      	adds	r0, #1
 8009c52:	d101      	bne.n	8009c58 <sbrk_aligned+0x38>
 8009c54:	f04f 34ff 	mov.w	r4, #4294967295
 8009c58:	4620      	mov	r0, r4
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	200009fc 	.word	0x200009fc

08009c60 <_malloc_r>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	1ccd      	adds	r5, r1, #3
 8009c66:	f025 0503 	bic.w	r5, r5, #3
 8009c6a:	3508      	adds	r5, #8
 8009c6c:	2d0c      	cmp	r5, #12
 8009c6e:	bf38      	it	cc
 8009c70:	250c      	movcc	r5, #12
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	4607      	mov	r7, r0
 8009c76:	db01      	blt.n	8009c7c <_malloc_r+0x1c>
 8009c78:	42a9      	cmp	r1, r5
 8009c7a:	d905      	bls.n	8009c88 <_malloc_r+0x28>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	2600      	movs	r6, #0
 8009c82:	4630      	mov	r0, r6
 8009c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d5c <_malloc_r+0xfc>
 8009c8c:	f000 f868 	bl	8009d60 <__malloc_lock>
 8009c90:	f8d8 3000 	ldr.w	r3, [r8]
 8009c94:	461c      	mov	r4, r3
 8009c96:	bb5c      	cbnz	r4, 8009cf0 <_malloc_r+0x90>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f7ff ffc0 	bl	8009c20 <sbrk_aligned>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	d155      	bne.n	8009d52 <_malloc_r+0xf2>
 8009ca6:	f8d8 4000 	ldr.w	r4, [r8]
 8009caa:	4626      	mov	r6, r4
 8009cac:	2e00      	cmp	r6, #0
 8009cae:	d145      	bne.n	8009d3c <_malloc_r+0xdc>
 8009cb0:	2c00      	cmp	r4, #0
 8009cb2:	d048      	beq.n	8009d46 <_malloc_r+0xe6>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4638      	mov	r0, r7
 8009cba:	eb04 0903 	add.w	r9, r4, r3
 8009cbe:	f000 f883 	bl	8009dc8 <_sbrk_r>
 8009cc2:	4581      	cmp	r9, r0
 8009cc4:	d13f      	bne.n	8009d46 <_malloc_r+0xe6>
 8009cc6:	6821      	ldr	r1, [r4, #0]
 8009cc8:	1a6d      	subs	r5, r5, r1
 8009cca:	4629      	mov	r1, r5
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f7ff ffa7 	bl	8009c20 <sbrk_aligned>
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d037      	beq.n	8009d46 <_malloc_r+0xe6>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	442b      	add	r3, r5
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d038      	beq.n	8009d56 <_malloc_r+0xf6>
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	42a2      	cmp	r2, r4
 8009ce8:	d12b      	bne.n	8009d42 <_malloc_r+0xe2>
 8009cea:	2200      	movs	r2, #0
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	e00f      	b.n	8009d10 <_malloc_r+0xb0>
 8009cf0:	6822      	ldr	r2, [r4, #0]
 8009cf2:	1b52      	subs	r2, r2, r5
 8009cf4:	d41f      	bmi.n	8009d36 <_malloc_r+0xd6>
 8009cf6:	2a0b      	cmp	r2, #11
 8009cf8:	d917      	bls.n	8009d2a <_malloc_r+0xca>
 8009cfa:	1961      	adds	r1, r4, r5
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	6025      	str	r5, [r4, #0]
 8009d00:	bf18      	it	ne
 8009d02:	6059      	strne	r1, [r3, #4]
 8009d04:	6863      	ldr	r3, [r4, #4]
 8009d06:	bf08      	it	eq
 8009d08:	f8c8 1000 	streq.w	r1, [r8]
 8009d0c:	5162      	str	r2, [r4, r5]
 8009d0e:	604b      	str	r3, [r1, #4]
 8009d10:	4638      	mov	r0, r7
 8009d12:	f104 060b 	add.w	r6, r4, #11
 8009d16:	f000 f829 	bl	8009d6c <__malloc_unlock>
 8009d1a:	f026 0607 	bic.w	r6, r6, #7
 8009d1e:	1d23      	adds	r3, r4, #4
 8009d20:	1af2      	subs	r2, r6, r3
 8009d22:	d0ae      	beq.n	8009c82 <_malloc_r+0x22>
 8009d24:	1b9b      	subs	r3, r3, r6
 8009d26:	50a3      	str	r3, [r4, r2]
 8009d28:	e7ab      	b.n	8009c82 <_malloc_r+0x22>
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	6862      	ldr	r2, [r4, #4]
 8009d2e:	d1dd      	bne.n	8009cec <_malloc_r+0x8c>
 8009d30:	f8c8 2000 	str.w	r2, [r8]
 8009d34:	e7ec      	b.n	8009d10 <_malloc_r+0xb0>
 8009d36:	4623      	mov	r3, r4
 8009d38:	6864      	ldr	r4, [r4, #4]
 8009d3a:	e7ac      	b.n	8009c96 <_malloc_r+0x36>
 8009d3c:	4634      	mov	r4, r6
 8009d3e:	6876      	ldr	r6, [r6, #4]
 8009d40:	e7b4      	b.n	8009cac <_malloc_r+0x4c>
 8009d42:	4613      	mov	r3, r2
 8009d44:	e7cc      	b.n	8009ce0 <_malloc_r+0x80>
 8009d46:	230c      	movs	r3, #12
 8009d48:	603b      	str	r3, [r7, #0]
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f000 f80e 	bl	8009d6c <__malloc_unlock>
 8009d50:	e797      	b.n	8009c82 <_malloc_r+0x22>
 8009d52:	6025      	str	r5, [r4, #0]
 8009d54:	e7dc      	b.n	8009d10 <_malloc_r+0xb0>
 8009d56:	605b      	str	r3, [r3, #4]
 8009d58:	deff      	udf	#255	; 0xff
 8009d5a:	bf00      	nop
 8009d5c:	200009f8 	.word	0x200009f8

08009d60 <__malloc_lock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	; (8009d68 <__malloc_lock+0x8>)
 8009d62:	f000 b86b 	b.w	8009e3c <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	20000b3c 	.word	0x20000b3c

08009d6c <__malloc_unlock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__malloc_unlock+0x8>)
 8009d6e:	f000 b866 	b.w	8009e3e <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	20000b3c 	.word	0x20000b3c

08009d78 <siprintf>:
 8009d78:	b40e      	push	{r1, r2, r3}
 8009d7a:	b500      	push	{lr}
 8009d7c:	b09c      	sub	sp, #112	; 0x70
 8009d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8009d80:	9002      	str	r0, [sp, #8]
 8009d82:	9006      	str	r0, [sp, #24]
 8009d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d88:	4809      	ldr	r0, [pc, #36]	; (8009db0 <siprintf+0x38>)
 8009d8a:	9107      	str	r1, [sp, #28]
 8009d8c:	9104      	str	r1, [sp, #16]
 8009d8e:	4909      	ldr	r1, [pc, #36]	; (8009db4 <siprintf+0x3c>)
 8009d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d94:	9105      	str	r1, [sp, #20]
 8009d96:	6800      	ldr	r0, [r0, #0]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	a902      	add	r1, sp, #8
 8009d9c:	f000 f8f6 	bl	8009f8c <_svfiprintf_r>
 8009da0:	9b02      	ldr	r3, [sp, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	b01c      	add	sp, #112	; 0x70
 8009da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dac:	b003      	add	sp, #12
 8009dae:	4770      	bx	lr
 8009db0:	20000078 	.word	0x20000078
 8009db4:	ffff0208 	.word	0xffff0208

08009db8 <memset>:
 8009db8:	4402      	add	r2, r0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d100      	bne.n	8009dc2 <memset+0xa>
 8009dc0:	4770      	bx	lr
 8009dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dc6:	e7f9      	b.n	8009dbc <memset+0x4>

08009dc8 <_sbrk_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d06      	ldr	r5, [pc, #24]	; (8009de4 <_sbrk_r+0x1c>)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	f7f7 f904 	bl	8000fe0 <_sbrk>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_sbrk_r+0x1a>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_sbrk_r+0x1a>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	20000b38 	.word	0x20000b38

08009de8 <__errno>:
 8009de8:	4b01      	ldr	r3, [pc, #4]	; (8009df0 <__errno+0x8>)
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000078 	.word	0x20000078

08009df4 <__libc_init_array>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4d0d      	ldr	r5, [pc, #52]	; (8009e2c <__libc_init_array+0x38>)
 8009df8:	4c0d      	ldr	r4, [pc, #52]	; (8009e30 <__libc_init_array+0x3c>)
 8009dfa:	1b64      	subs	r4, r4, r5
 8009dfc:	10a4      	asrs	r4, r4, #2
 8009dfe:	2600      	movs	r6, #0
 8009e00:	42a6      	cmp	r6, r4
 8009e02:	d109      	bne.n	8009e18 <__libc_init_array+0x24>
 8009e04:	4d0b      	ldr	r5, [pc, #44]	; (8009e34 <__libc_init_array+0x40>)
 8009e06:	4c0c      	ldr	r4, [pc, #48]	; (8009e38 <__libc_init_array+0x44>)
 8009e08:	f000 fbae 	bl	800a568 <_init>
 8009e0c:	1b64      	subs	r4, r4, r5
 8009e0e:	10a4      	asrs	r4, r4, #2
 8009e10:	2600      	movs	r6, #0
 8009e12:	42a6      	cmp	r6, r4
 8009e14:	d105      	bne.n	8009e22 <__libc_init_array+0x2e>
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e1c:	4798      	blx	r3
 8009e1e:	3601      	adds	r6, #1
 8009e20:	e7ee      	b.n	8009e00 <__libc_init_array+0xc>
 8009e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e26:	4798      	blx	r3
 8009e28:	3601      	adds	r6, #1
 8009e2a:	e7f2      	b.n	8009e12 <__libc_init_array+0x1e>
 8009e2c:	0800a5e8 	.word	0x0800a5e8
 8009e30:	0800a5e8 	.word	0x0800a5e8
 8009e34:	0800a5e8 	.word	0x0800a5e8
 8009e38:	0800a5ec 	.word	0x0800a5ec

08009e3c <__retarget_lock_acquire_recursive>:
 8009e3c:	4770      	bx	lr

08009e3e <__retarget_lock_release_recursive>:
 8009e3e:	4770      	bx	lr

08009e40 <_free_r>:
 8009e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e42:	2900      	cmp	r1, #0
 8009e44:	d044      	beq.n	8009ed0 <_free_r+0x90>
 8009e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4a:	9001      	str	r0, [sp, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e52:	bfb8      	it	lt
 8009e54:	18e4      	addlt	r4, r4, r3
 8009e56:	f7ff ff83 	bl	8009d60 <__malloc_lock>
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <_free_r+0x94>)
 8009e5c:	9801      	ldr	r0, [sp, #4]
 8009e5e:	6813      	ldr	r3, [r2, #0]
 8009e60:	b933      	cbnz	r3, 8009e70 <_free_r+0x30>
 8009e62:	6063      	str	r3, [r4, #4]
 8009e64:	6014      	str	r4, [r2, #0]
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e6c:	f7ff bf7e 	b.w	8009d6c <__malloc_unlock>
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d908      	bls.n	8009e86 <_free_r+0x46>
 8009e74:	6825      	ldr	r5, [r4, #0]
 8009e76:	1961      	adds	r1, r4, r5
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	bf01      	itttt	eq
 8009e7c:	6819      	ldreq	r1, [r3, #0]
 8009e7e:	685b      	ldreq	r3, [r3, #4]
 8009e80:	1949      	addeq	r1, r1, r5
 8009e82:	6021      	streq	r1, [r4, #0]
 8009e84:	e7ed      	b.n	8009e62 <_free_r+0x22>
 8009e86:	461a      	mov	r2, r3
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	b10b      	cbz	r3, 8009e90 <_free_r+0x50>
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	d9fa      	bls.n	8009e86 <_free_r+0x46>
 8009e90:	6811      	ldr	r1, [r2, #0]
 8009e92:	1855      	adds	r5, r2, r1
 8009e94:	42a5      	cmp	r5, r4
 8009e96:	d10b      	bne.n	8009eb0 <_free_r+0x70>
 8009e98:	6824      	ldr	r4, [r4, #0]
 8009e9a:	4421      	add	r1, r4
 8009e9c:	1854      	adds	r4, r2, r1
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	6011      	str	r1, [r2, #0]
 8009ea2:	d1e0      	bne.n	8009e66 <_free_r+0x26>
 8009ea4:	681c      	ldr	r4, [r3, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	6053      	str	r3, [r2, #4]
 8009eaa:	440c      	add	r4, r1
 8009eac:	6014      	str	r4, [r2, #0]
 8009eae:	e7da      	b.n	8009e66 <_free_r+0x26>
 8009eb0:	d902      	bls.n	8009eb8 <_free_r+0x78>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	e7d6      	b.n	8009e66 <_free_r+0x26>
 8009eb8:	6825      	ldr	r5, [r4, #0]
 8009eba:	1961      	adds	r1, r4, r5
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	bf04      	itt	eq
 8009ec0:	6819      	ldreq	r1, [r3, #0]
 8009ec2:	685b      	ldreq	r3, [r3, #4]
 8009ec4:	6063      	str	r3, [r4, #4]
 8009ec6:	bf04      	itt	eq
 8009ec8:	1949      	addeq	r1, r1, r5
 8009eca:	6021      	streq	r1, [r4, #0]
 8009ecc:	6054      	str	r4, [r2, #4]
 8009ece:	e7ca      	b.n	8009e66 <_free_r+0x26>
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bd30      	pop	{r4, r5, pc}
 8009ed4:	200009f8 	.word	0x200009f8

08009ed8 <__ssputs_r>:
 8009ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009edc:	688e      	ldr	r6, [r1, #8]
 8009ede:	461f      	mov	r7, r3
 8009ee0:	42be      	cmp	r6, r7
 8009ee2:	680b      	ldr	r3, [r1, #0]
 8009ee4:	4682      	mov	sl, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	4690      	mov	r8, r2
 8009eea:	d82c      	bhi.n	8009f46 <__ssputs_r+0x6e>
 8009eec:	898a      	ldrh	r2, [r1, #12]
 8009eee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ef2:	d026      	beq.n	8009f42 <__ssputs_r+0x6a>
 8009ef4:	6965      	ldr	r5, [r4, #20]
 8009ef6:	6909      	ldr	r1, [r1, #16]
 8009ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009efc:	eba3 0901 	sub.w	r9, r3, r1
 8009f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f04:	1c7b      	adds	r3, r7, #1
 8009f06:	444b      	add	r3, r9
 8009f08:	106d      	asrs	r5, r5, #1
 8009f0a:	429d      	cmp	r5, r3
 8009f0c:	bf38      	it	cc
 8009f0e:	461d      	movcc	r5, r3
 8009f10:	0553      	lsls	r3, r2, #21
 8009f12:	d527      	bpl.n	8009f64 <__ssputs_r+0x8c>
 8009f14:	4629      	mov	r1, r5
 8009f16:	f7ff fea3 	bl	8009c60 <_malloc_r>
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	b360      	cbz	r0, 8009f78 <__ssputs_r+0xa0>
 8009f1e:	6921      	ldr	r1, [r4, #16]
 8009f20:	464a      	mov	r2, r9
 8009f22:	f000 fadb 	bl	800a4dc <memcpy>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	6126      	str	r6, [r4, #16]
 8009f34:	6165      	str	r5, [r4, #20]
 8009f36:	444e      	add	r6, r9
 8009f38:	eba5 0509 	sub.w	r5, r5, r9
 8009f3c:	6026      	str	r6, [r4, #0]
 8009f3e:	60a5      	str	r5, [r4, #8]
 8009f40:	463e      	mov	r6, r7
 8009f42:	42be      	cmp	r6, r7
 8009f44:	d900      	bls.n	8009f48 <__ssputs_r+0x70>
 8009f46:	463e      	mov	r6, r7
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	4632      	mov	r2, r6
 8009f4c:	4641      	mov	r1, r8
 8009f4e:	f000 faab 	bl	800a4a8 <memmove>
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	1b9b      	subs	r3, r3, r6
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	4433      	add	r3, r6
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f64:	462a      	mov	r2, r5
 8009f66:	f000 fac7 	bl	800a4f8 <_realloc_r>
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d1e0      	bne.n	8009f32 <__ssputs_r+0x5a>
 8009f70:	6921      	ldr	r1, [r4, #16]
 8009f72:	4650      	mov	r0, sl
 8009f74:	f7ff ff64 	bl	8009e40 <_free_r>
 8009f78:	230c      	movs	r3, #12
 8009f7a:	f8ca 3000 	str.w	r3, [sl]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f84:	81a3      	strh	r3, [r4, #12]
 8009f86:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8a:	e7e9      	b.n	8009f60 <__ssputs_r+0x88>

08009f8c <_svfiprintf_r>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	4698      	mov	r8, r3
 8009f92:	898b      	ldrh	r3, [r1, #12]
 8009f94:	061b      	lsls	r3, r3, #24
 8009f96:	b09d      	sub	sp, #116	; 0x74
 8009f98:	4607      	mov	r7, r0
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	d50e      	bpl.n	8009fbe <_svfiprintf_r+0x32>
 8009fa0:	690b      	ldr	r3, [r1, #16]
 8009fa2:	b963      	cbnz	r3, 8009fbe <_svfiprintf_r+0x32>
 8009fa4:	2140      	movs	r1, #64	; 0x40
 8009fa6:	f7ff fe5b 	bl	8009c60 <_malloc_r>
 8009faa:	6028      	str	r0, [r5, #0]
 8009fac:	6128      	str	r0, [r5, #16]
 8009fae:	b920      	cbnz	r0, 8009fba <_svfiprintf_r+0x2e>
 8009fb0:	230c      	movs	r3, #12
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	e0d0      	b.n	800a15c <_svfiprintf_r+0x1d0>
 8009fba:	2340      	movs	r3, #64	; 0x40
 8009fbc:	616b      	str	r3, [r5, #20]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc2:	2320      	movs	r3, #32
 8009fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fcc:	2330      	movs	r3, #48	; 0x30
 8009fce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a174 <_svfiprintf_r+0x1e8>
 8009fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fd6:	f04f 0901 	mov.w	r9, #1
 8009fda:	4623      	mov	r3, r4
 8009fdc:	469a      	mov	sl, r3
 8009fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe2:	b10a      	cbz	r2, 8009fe8 <_svfiprintf_r+0x5c>
 8009fe4:	2a25      	cmp	r2, #37	; 0x25
 8009fe6:	d1f9      	bne.n	8009fdc <_svfiprintf_r+0x50>
 8009fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fec:	d00b      	beq.n	800a006 <_svfiprintf_r+0x7a>
 8009fee:	465b      	mov	r3, fp
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff ff6f 	bl	8009ed8 <__ssputs_r>
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	f000 80a9 	beq.w	800a152 <_svfiprintf_r+0x1c6>
 800a000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a002:	445a      	add	r2, fp
 800a004:	9209      	str	r2, [sp, #36]	; 0x24
 800a006:	f89a 3000 	ldrb.w	r3, [sl]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 80a1 	beq.w	800a152 <_svfiprintf_r+0x1c6>
 800a010:	2300      	movs	r3, #0
 800a012:	f04f 32ff 	mov.w	r2, #4294967295
 800a016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a01a:	f10a 0a01 	add.w	sl, sl, #1
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	9307      	str	r3, [sp, #28]
 800a022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a026:	931a      	str	r3, [sp, #104]	; 0x68
 800a028:	4654      	mov	r4, sl
 800a02a:	2205      	movs	r2, #5
 800a02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a030:	4850      	ldr	r0, [pc, #320]	; (800a174 <_svfiprintf_r+0x1e8>)
 800a032:	f7f6 f8d5 	bl	80001e0 <memchr>
 800a036:	9a04      	ldr	r2, [sp, #16]
 800a038:	b9d8      	cbnz	r0, 800a072 <_svfiprintf_r+0xe6>
 800a03a:	06d0      	lsls	r0, r2, #27
 800a03c:	bf44      	itt	mi
 800a03e:	2320      	movmi	r3, #32
 800a040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a044:	0711      	lsls	r1, r2, #28
 800a046:	bf44      	itt	mi
 800a048:	232b      	movmi	r3, #43	; 0x2b
 800a04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a04e:	f89a 3000 	ldrb.w	r3, [sl]
 800a052:	2b2a      	cmp	r3, #42	; 0x2a
 800a054:	d015      	beq.n	800a082 <_svfiprintf_r+0xf6>
 800a056:	9a07      	ldr	r2, [sp, #28]
 800a058:	4654      	mov	r4, sl
 800a05a:	2000      	movs	r0, #0
 800a05c:	f04f 0c0a 	mov.w	ip, #10
 800a060:	4621      	mov	r1, r4
 800a062:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a066:	3b30      	subs	r3, #48	; 0x30
 800a068:	2b09      	cmp	r3, #9
 800a06a:	d94d      	bls.n	800a108 <_svfiprintf_r+0x17c>
 800a06c:	b1b0      	cbz	r0, 800a09c <_svfiprintf_r+0x110>
 800a06e:	9207      	str	r2, [sp, #28]
 800a070:	e014      	b.n	800a09c <_svfiprintf_r+0x110>
 800a072:	eba0 0308 	sub.w	r3, r0, r8
 800a076:	fa09 f303 	lsl.w	r3, r9, r3
 800a07a:	4313      	orrs	r3, r2
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	46a2      	mov	sl, r4
 800a080:	e7d2      	b.n	800a028 <_svfiprintf_r+0x9c>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	1d19      	adds	r1, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	9103      	str	r1, [sp, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bfbb      	ittet	lt
 800a08e:	425b      	neglt	r3, r3
 800a090:	f042 0202 	orrlt.w	r2, r2, #2
 800a094:	9307      	strge	r3, [sp, #28]
 800a096:	9307      	strlt	r3, [sp, #28]
 800a098:	bfb8      	it	lt
 800a09a:	9204      	strlt	r2, [sp, #16]
 800a09c:	7823      	ldrb	r3, [r4, #0]
 800a09e:	2b2e      	cmp	r3, #46	; 0x2e
 800a0a0:	d10c      	bne.n	800a0bc <_svfiprintf_r+0x130>
 800a0a2:	7863      	ldrb	r3, [r4, #1]
 800a0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a6:	d134      	bne.n	800a112 <_svfiprintf_r+0x186>
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	9203      	str	r2, [sp, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	bfb8      	it	lt
 800a0b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0b8:	3402      	adds	r4, #2
 800a0ba:	9305      	str	r3, [sp, #20]
 800a0bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a184 <_svfiprintf_r+0x1f8>
 800a0c0:	7821      	ldrb	r1, [r4, #0]
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	f7f6 f88b 	bl	80001e0 <memchr>
 800a0ca:	b138      	cbz	r0, 800a0dc <_svfiprintf_r+0x150>
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	eba0 000a 	sub.w	r0, r0, sl
 800a0d2:	2240      	movs	r2, #64	; 0x40
 800a0d4:	4082      	lsls	r2, r0
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	3401      	adds	r4, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e0:	4825      	ldr	r0, [pc, #148]	; (800a178 <_svfiprintf_r+0x1ec>)
 800a0e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0e6:	2206      	movs	r2, #6
 800a0e8:	f7f6 f87a 	bl	80001e0 <memchr>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d038      	beq.n	800a162 <_svfiprintf_r+0x1d6>
 800a0f0:	4b22      	ldr	r3, [pc, #136]	; (800a17c <_svfiprintf_r+0x1f0>)
 800a0f2:	bb1b      	cbnz	r3, 800a13c <_svfiprintf_r+0x1b0>
 800a0f4:	9b03      	ldr	r3, [sp, #12]
 800a0f6:	3307      	adds	r3, #7
 800a0f8:	f023 0307 	bic.w	r3, r3, #7
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	9303      	str	r3, [sp, #12]
 800a100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a102:	4433      	add	r3, r6
 800a104:	9309      	str	r3, [sp, #36]	; 0x24
 800a106:	e768      	b.n	8009fda <_svfiprintf_r+0x4e>
 800a108:	fb0c 3202 	mla	r2, ip, r2, r3
 800a10c:	460c      	mov	r4, r1
 800a10e:	2001      	movs	r0, #1
 800a110:	e7a6      	b.n	800a060 <_svfiprintf_r+0xd4>
 800a112:	2300      	movs	r3, #0
 800a114:	3401      	adds	r4, #1
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	4619      	mov	r1, r3
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	4620      	mov	r0, r4
 800a120:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a124:	3a30      	subs	r2, #48	; 0x30
 800a126:	2a09      	cmp	r2, #9
 800a128:	d903      	bls.n	800a132 <_svfiprintf_r+0x1a6>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0c6      	beq.n	800a0bc <_svfiprintf_r+0x130>
 800a12e:	9105      	str	r1, [sp, #20]
 800a130:	e7c4      	b.n	800a0bc <_svfiprintf_r+0x130>
 800a132:	fb0c 2101 	mla	r1, ip, r1, r2
 800a136:	4604      	mov	r4, r0
 800a138:	2301      	movs	r3, #1
 800a13a:	e7f0      	b.n	800a11e <_svfiprintf_r+0x192>
 800a13c:	ab03      	add	r3, sp, #12
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	462a      	mov	r2, r5
 800a142:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <_svfiprintf_r+0x1f4>)
 800a144:	a904      	add	r1, sp, #16
 800a146:	4638      	mov	r0, r7
 800a148:	f3af 8000 	nop.w
 800a14c:	1c42      	adds	r2, r0, #1
 800a14e:	4606      	mov	r6, r0
 800a150:	d1d6      	bne.n	800a100 <_svfiprintf_r+0x174>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	065b      	lsls	r3, r3, #25
 800a156:	f53f af2d 	bmi.w	8009fb4 <_svfiprintf_r+0x28>
 800a15a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15c:	b01d      	add	sp, #116	; 0x74
 800a15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a162:	ab03      	add	r3, sp, #12
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	462a      	mov	r2, r5
 800a168:	4b05      	ldr	r3, [pc, #20]	; (800a180 <_svfiprintf_r+0x1f4>)
 800a16a:	a904      	add	r1, sp, #16
 800a16c:	4638      	mov	r0, r7
 800a16e:	f000 f879 	bl	800a264 <_printf_i>
 800a172:	e7eb      	b.n	800a14c <_svfiprintf_r+0x1c0>
 800a174:	0800a5ac 	.word	0x0800a5ac
 800a178:	0800a5b6 	.word	0x0800a5b6
 800a17c:	00000000 	.word	0x00000000
 800a180:	08009ed9 	.word	0x08009ed9
 800a184:	0800a5b2 	.word	0x0800a5b2

0800a188 <_printf_common>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	4616      	mov	r6, r2
 800a18e:	4699      	mov	r9, r3
 800a190:	688a      	ldr	r2, [r1, #8]
 800a192:	690b      	ldr	r3, [r1, #16]
 800a194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a198:	4293      	cmp	r3, r2
 800a19a:	bfb8      	it	lt
 800a19c:	4613      	movlt	r3, r2
 800a19e:	6033      	str	r3, [r6, #0]
 800a1a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	b10a      	cbz	r2, 800a1ae <_printf_common+0x26>
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	6033      	str	r3, [r6, #0]
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	0699      	lsls	r1, r3, #26
 800a1b2:	bf42      	ittt	mi
 800a1b4:	6833      	ldrmi	r3, [r6, #0]
 800a1b6:	3302      	addmi	r3, #2
 800a1b8:	6033      	strmi	r3, [r6, #0]
 800a1ba:	6825      	ldr	r5, [r4, #0]
 800a1bc:	f015 0506 	ands.w	r5, r5, #6
 800a1c0:	d106      	bne.n	800a1d0 <_printf_common+0x48>
 800a1c2:	f104 0a19 	add.w	sl, r4, #25
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	6832      	ldr	r2, [r6, #0]
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dc26      	bgt.n	800a21e <_printf_common+0x96>
 800a1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1d4:	1e13      	subs	r3, r2, #0
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	bf18      	it	ne
 800a1da:	2301      	movne	r3, #1
 800a1dc:	0692      	lsls	r2, r2, #26
 800a1de:	d42b      	bmi.n	800a238 <_printf_common+0xb0>
 800a1e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	47c0      	blx	r8
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d01e      	beq.n	800a22c <_printf_common+0xa4>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	6922      	ldr	r2, [r4, #16]
 800a1f2:	f003 0306 	and.w	r3, r3, #6
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	bf02      	ittt	eq
 800a1fa:	68e5      	ldreq	r5, [r4, #12]
 800a1fc:	6833      	ldreq	r3, [r6, #0]
 800a1fe:	1aed      	subeq	r5, r5, r3
 800a200:	68a3      	ldr	r3, [r4, #8]
 800a202:	bf0c      	ite	eq
 800a204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a208:	2500      	movne	r5, #0
 800a20a:	4293      	cmp	r3, r2
 800a20c:	bfc4      	itt	gt
 800a20e:	1a9b      	subgt	r3, r3, r2
 800a210:	18ed      	addgt	r5, r5, r3
 800a212:	2600      	movs	r6, #0
 800a214:	341a      	adds	r4, #26
 800a216:	42b5      	cmp	r5, r6
 800a218:	d11a      	bne.n	800a250 <_printf_common+0xc8>
 800a21a:	2000      	movs	r0, #0
 800a21c:	e008      	b.n	800a230 <_printf_common+0xa8>
 800a21e:	2301      	movs	r3, #1
 800a220:	4652      	mov	r2, sl
 800a222:	4649      	mov	r1, r9
 800a224:	4638      	mov	r0, r7
 800a226:	47c0      	blx	r8
 800a228:	3001      	adds	r0, #1
 800a22a:	d103      	bne.n	800a234 <_printf_common+0xac>
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	3501      	adds	r5, #1
 800a236:	e7c6      	b.n	800a1c6 <_printf_common+0x3e>
 800a238:	18e1      	adds	r1, r4, r3
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	2030      	movs	r0, #48	; 0x30
 800a23e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a242:	4422      	add	r2, r4
 800a244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a24c:	3302      	adds	r3, #2
 800a24e:	e7c7      	b.n	800a1e0 <_printf_common+0x58>
 800a250:	2301      	movs	r3, #1
 800a252:	4622      	mov	r2, r4
 800a254:	4649      	mov	r1, r9
 800a256:	4638      	mov	r0, r7
 800a258:	47c0      	blx	r8
 800a25a:	3001      	adds	r0, #1
 800a25c:	d0e6      	beq.n	800a22c <_printf_common+0xa4>
 800a25e:	3601      	adds	r6, #1
 800a260:	e7d9      	b.n	800a216 <_printf_common+0x8e>
	...

0800a264 <_printf_i>:
 800a264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	7e0f      	ldrb	r7, [r1, #24]
 800a26a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a26c:	2f78      	cmp	r7, #120	; 0x78
 800a26e:	4691      	mov	r9, r2
 800a270:	4680      	mov	r8, r0
 800a272:	460c      	mov	r4, r1
 800a274:	469a      	mov	sl, r3
 800a276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a27a:	d807      	bhi.n	800a28c <_printf_i+0x28>
 800a27c:	2f62      	cmp	r7, #98	; 0x62
 800a27e:	d80a      	bhi.n	800a296 <_printf_i+0x32>
 800a280:	2f00      	cmp	r7, #0
 800a282:	f000 80d4 	beq.w	800a42e <_printf_i+0x1ca>
 800a286:	2f58      	cmp	r7, #88	; 0x58
 800a288:	f000 80c0 	beq.w	800a40c <_printf_i+0x1a8>
 800a28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a294:	e03a      	b.n	800a30c <_printf_i+0xa8>
 800a296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a29a:	2b15      	cmp	r3, #21
 800a29c:	d8f6      	bhi.n	800a28c <_printf_i+0x28>
 800a29e:	a101      	add	r1, pc, #4	; (adr r1, 800a2a4 <_printf_i+0x40>)
 800a2a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2a4:	0800a2fd 	.word	0x0800a2fd
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a28d 	.word	0x0800a28d
 800a2b0:	0800a28d 	.word	0x0800a28d
 800a2b4:	0800a28d 	.word	0x0800a28d
 800a2b8:	0800a28d 	.word	0x0800a28d
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a28d 	.word	0x0800a28d
 800a2c4:	0800a28d 	.word	0x0800a28d
 800a2c8:	0800a28d 	.word	0x0800a28d
 800a2cc:	0800a28d 	.word	0x0800a28d
 800a2d0:	0800a415 	.word	0x0800a415
 800a2d4:	0800a33d 	.word	0x0800a33d
 800a2d8:	0800a3cf 	.word	0x0800a3cf
 800a2dc:	0800a28d 	.word	0x0800a28d
 800a2e0:	0800a28d 	.word	0x0800a28d
 800a2e4:	0800a437 	.word	0x0800a437
 800a2e8:	0800a28d 	.word	0x0800a28d
 800a2ec:	0800a33d 	.word	0x0800a33d
 800a2f0:	0800a28d 	.word	0x0800a28d
 800a2f4:	0800a28d 	.word	0x0800a28d
 800a2f8:	0800a3d7 	.word	0x0800a3d7
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	1d1a      	adds	r2, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	602a      	str	r2, [r5, #0]
 800a304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a30c:	2301      	movs	r3, #1
 800a30e:	e09f      	b.n	800a450 <_printf_i+0x1ec>
 800a310:	6820      	ldr	r0, [r4, #0]
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	0607      	lsls	r7, r0, #24
 800a316:	f103 0104 	add.w	r1, r3, #4
 800a31a:	6029      	str	r1, [r5, #0]
 800a31c:	d501      	bpl.n	800a322 <_printf_i+0xbe>
 800a31e:	681e      	ldr	r6, [r3, #0]
 800a320:	e003      	b.n	800a32a <_printf_i+0xc6>
 800a322:	0646      	lsls	r6, r0, #25
 800a324:	d5fb      	bpl.n	800a31e <_printf_i+0xba>
 800a326:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	da03      	bge.n	800a336 <_printf_i+0xd2>
 800a32e:	232d      	movs	r3, #45	; 0x2d
 800a330:	4276      	negs	r6, r6
 800a332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a336:	485a      	ldr	r0, [pc, #360]	; (800a4a0 <_printf_i+0x23c>)
 800a338:	230a      	movs	r3, #10
 800a33a:	e012      	b.n	800a362 <_printf_i+0xfe>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	6820      	ldr	r0, [r4, #0]
 800a340:	1d19      	adds	r1, r3, #4
 800a342:	6029      	str	r1, [r5, #0]
 800a344:	0605      	lsls	r5, r0, #24
 800a346:	d501      	bpl.n	800a34c <_printf_i+0xe8>
 800a348:	681e      	ldr	r6, [r3, #0]
 800a34a:	e002      	b.n	800a352 <_printf_i+0xee>
 800a34c:	0641      	lsls	r1, r0, #25
 800a34e:	d5fb      	bpl.n	800a348 <_printf_i+0xe4>
 800a350:	881e      	ldrh	r6, [r3, #0]
 800a352:	4853      	ldr	r0, [pc, #332]	; (800a4a0 <_printf_i+0x23c>)
 800a354:	2f6f      	cmp	r7, #111	; 0x6f
 800a356:	bf0c      	ite	eq
 800a358:	2308      	moveq	r3, #8
 800a35a:	230a      	movne	r3, #10
 800a35c:	2100      	movs	r1, #0
 800a35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a362:	6865      	ldr	r5, [r4, #4]
 800a364:	60a5      	str	r5, [r4, #8]
 800a366:	2d00      	cmp	r5, #0
 800a368:	bfa2      	ittt	ge
 800a36a:	6821      	ldrge	r1, [r4, #0]
 800a36c:	f021 0104 	bicge.w	r1, r1, #4
 800a370:	6021      	strge	r1, [r4, #0]
 800a372:	b90e      	cbnz	r6, 800a378 <_printf_i+0x114>
 800a374:	2d00      	cmp	r5, #0
 800a376:	d04b      	beq.n	800a410 <_printf_i+0x1ac>
 800a378:	4615      	mov	r5, r2
 800a37a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a37e:	fb03 6711 	mls	r7, r3, r1, r6
 800a382:	5dc7      	ldrb	r7, [r0, r7]
 800a384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a388:	4637      	mov	r7, r6
 800a38a:	42bb      	cmp	r3, r7
 800a38c:	460e      	mov	r6, r1
 800a38e:	d9f4      	bls.n	800a37a <_printf_i+0x116>
 800a390:	2b08      	cmp	r3, #8
 800a392:	d10b      	bne.n	800a3ac <_printf_i+0x148>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	07de      	lsls	r6, r3, #31
 800a398:	d508      	bpl.n	800a3ac <_printf_i+0x148>
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	6861      	ldr	r1, [r4, #4]
 800a39e:	4299      	cmp	r1, r3
 800a3a0:	bfde      	ittt	le
 800a3a2:	2330      	movle	r3, #48	; 0x30
 800a3a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3ac:	1b52      	subs	r2, r2, r5
 800a3ae:	6122      	str	r2, [r4, #16]
 800a3b0:	f8cd a000 	str.w	sl, [sp]
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	aa03      	add	r2, sp, #12
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7ff fee4 	bl	800a188 <_printf_common>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d14a      	bne.n	800a45a <_printf_i+0x1f6>
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	b004      	add	sp, #16
 800a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	f043 0320 	orr.w	r3, r3, #32
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	4833      	ldr	r0, [pc, #204]	; (800a4a4 <_printf_i+0x240>)
 800a3d8:	2778      	movs	r7, #120	; 0x78
 800a3da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	6829      	ldr	r1, [r5, #0]
 800a3e2:	061f      	lsls	r7, r3, #24
 800a3e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3e8:	d402      	bmi.n	800a3f0 <_printf_i+0x18c>
 800a3ea:	065f      	lsls	r7, r3, #25
 800a3ec:	bf48      	it	mi
 800a3ee:	b2b6      	uxthmi	r6, r6
 800a3f0:	07df      	lsls	r7, r3, #31
 800a3f2:	bf48      	it	mi
 800a3f4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3f8:	6029      	str	r1, [r5, #0]
 800a3fa:	bf48      	it	mi
 800a3fc:	6023      	strmi	r3, [r4, #0]
 800a3fe:	b91e      	cbnz	r6, 800a408 <_printf_i+0x1a4>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	f023 0320 	bic.w	r3, r3, #32
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	2310      	movs	r3, #16
 800a40a:	e7a7      	b.n	800a35c <_printf_i+0xf8>
 800a40c:	4824      	ldr	r0, [pc, #144]	; (800a4a0 <_printf_i+0x23c>)
 800a40e:	e7e4      	b.n	800a3da <_printf_i+0x176>
 800a410:	4615      	mov	r5, r2
 800a412:	e7bd      	b.n	800a390 <_printf_i+0x12c>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	6826      	ldr	r6, [r4, #0]
 800a418:	6961      	ldr	r1, [r4, #20]
 800a41a:	1d18      	adds	r0, r3, #4
 800a41c:	6028      	str	r0, [r5, #0]
 800a41e:	0635      	lsls	r5, r6, #24
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	d501      	bpl.n	800a428 <_printf_i+0x1c4>
 800a424:	6019      	str	r1, [r3, #0]
 800a426:	e002      	b.n	800a42e <_printf_i+0x1ca>
 800a428:	0670      	lsls	r0, r6, #25
 800a42a:	d5fb      	bpl.n	800a424 <_printf_i+0x1c0>
 800a42c:	8019      	strh	r1, [r3, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	4615      	mov	r5, r2
 800a434:	e7bc      	b.n	800a3b0 <_printf_i+0x14c>
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	602a      	str	r2, [r5, #0]
 800a43c:	681d      	ldr	r5, [r3, #0]
 800a43e:	6862      	ldr	r2, [r4, #4]
 800a440:	2100      	movs	r1, #0
 800a442:	4628      	mov	r0, r5
 800a444:	f7f5 fecc 	bl	80001e0 <memchr>
 800a448:	b108      	cbz	r0, 800a44e <_printf_i+0x1ea>
 800a44a:	1b40      	subs	r0, r0, r5
 800a44c:	6060      	str	r0, [r4, #4]
 800a44e:	6863      	ldr	r3, [r4, #4]
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	2300      	movs	r3, #0
 800a454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a458:	e7aa      	b.n	800a3b0 <_printf_i+0x14c>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	462a      	mov	r2, r5
 800a45e:	4649      	mov	r1, r9
 800a460:	4640      	mov	r0, r8
 800a462:	47d0      	blx	sl
 800a464:	3001      	adds	r0, #1
 800a466:	d0ad      	beq.n	800a3c4 <_printf_i+0x160>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	079b      	lsls	r3, r3, #30
 800a46c:	d413      	bmi.n	800a496 <_printf_i+0x232>
 800a46e:	68e0      	ldr	r0, [r4, #12]
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	4298      	cmp	r0, r3
 800a474:	bfb8      	it	lt
 800a476:	4618      	movlt	r0, r3
 800a478:	e7a6      	b.n	800a3c8 <_printf_i+0x164>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4632      	mov	r2, r6
 800a47e:	4649      	mov	r1, r9
 800a480:	4640      	mov	r0, r8
 800a482:	47d0      	blx	sl
 800a484:	3001      	adds	r0, #1
 800a486:	d09d      	beq.n	800a3c4 <_printf_i+0x160>
 800a488:	3501      	adds	r5, #1
 800a48a:	68e3      	ldr	r3, [r4, #12]
 800a48c:	9903      	ldr	r1, [sp, #12]
 800a48e:	1a5b      	subs	r3, r3, r1
 800a490:	42ab      	cmp	r3, r5
 800a492:	dcf2      	bgt.n	800a47a <_printf_i+0x216>
 800a494:	e7eb      	b.n	800a46e <_printf_i+0x20a>
 800a496:	2500      	movs	r5, #0
 800a498:	f104 0619 	add.w	r6, r4, #25
 800a49c:	e7f5      	b.n	800a48a <_printf_i+0x226>
 800a49e:	bf00      	nop
 800a4a0:	0800a5bd 	.word	0x0800a5bd
 800a4a4:	0800a5ce 	.word	0x0800a5ce

0800a4a8 <memmove>:
 800a4a8:	4288      	cmp	r0, r1
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	eb01 0402 	add.w	r4, r1, r2
 800a4b0:	d902      	bls.n	800a4b8 <memmove+0x10>
 800a4b2:	4284      	cmp	r4, r0
 800a4b4:	4623      	mov	r3, r4
 800a4b6:	d807      	bhi.n	800a4c8 <memmove+0x20>
 800a4b8:	1e43      	subs	r3, r0, #1
 800a4ba:	42a1      	cmp	r1, r4
 800a4bc:	d008      	beq.n	800a4d0 <memmove+0x28>
 800a4be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4c6:	e7f8      	b.n	800a4ba <memmove+0x12>
 800a4c8:	4402      	add	r2, r0
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	428a      	cmp	r2, r1
 800a4ce:	d100      	bne.n	800a4d2 <memmove+0x2a>
 800a4d0:	bd10      	pop	{r4, pc}
 800a4d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4da:	e7f7      	b.n	800a4cc <memmove+0x24>

0800a4dc <memcpy>:
 800a4dc:	440a      	add	r2, r1
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4e4:	d100      	bne.n	800a4e8 <memcpy+0xc>
 800a4e6:	4770      	bx	lr
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	d1f9      	bne.n	800a4ea <memcpy+0xe>
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <_realloc_r>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	4614      	mov	r4, r2
 800a500:	460e      	mov	r6, r1
 800a502:	b921      	cbnz	r1, 800a50e <_realloc_r+0x16>
 800a504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a508:	4611      	mov	r1, r2
 800a50a:	f7ff bba9 	b.w	8009c60 <_malloc_r>
 800a50e:	b92a      	cbnz	r2, 800a51c <_realloc_r+0x24>
 800a510:	f7ff fc96 	bl	8009e40 <_free_r>
 800a514:	4625      	mov	r5, r4
 800a516:	4628      	mov	r0, r5
 800a518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51c:	f000 f81b 	bl	800a556 <_malloc_usable_size_r>
 800a520:	4284      	cmp	r4, r0
 800a522:	4607      	mov	r7, r0
 800a524:	d802      	bhi.n	800a52c <_realloc_r+0x34>
 800a526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a52a:	d812      	bhi.n	800a552 <_realloc_r+0x5a>
 800a52c:	4621      	mov	r1, r4
 800a52e:	4640      	mov	r0, r8
 800a530:	f7ff fb96 	bl	8009c60 <_malloc_r>
 800a534:	4605      	mov	r5, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	d0ed      	beq.n	800a516 <_realloc_r+0x1e>
 800a53a:	42bc      	cmp	r4, r7
 800a53c:	4622      	mov	r2, r4
 800a53e:	4631      	mov	r1, r6
 800a540:	bf28      	it	cs
 800a542:	463a      	movcs	r2, r7
 800a544:	f7ff ffca 	bl	800a4dc <memcpy>
 800a548:	4631      	mov	r1, r6
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7ff fc78 	bl	8009e40 <_free_r>
 800a550:	e7e1      	b.n	800a516 <_realloc_r+0x1e>
 800a552:	4635      	mov	r5, r6
 800a554:	e7df      	b.n	800a516 <_realloc_r+0x1e>

0800a556 <_malloc_usable_size_r>:
 800a556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a55a:	1f18      	subs	r0, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfbc      	itt	lt
 800a560:	580b      	ldrlt	r3, [r1, r0]
 800a562:	18c0      	addlt	r0, r0, r3
 800a564:	4770      	bx	lr
	...

0800a568 <_init>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	bf00      	nop
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr

0800a574 <_fini>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	bf00      	nop
 800a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57a:	bc08      	pop	{r3}
 800a57c:	469e      	mov	lr, r3
 800a57e:	4770      	bx	lr
